"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[9540],{91121:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"guides/data-binding/binding-to-controls","title":"How To Bind to a Control","description":"With Avalonia UI, as well as binding to a data context you can also bind one control directly to another.","source":"@site/docs/guides/data-binding/binding-to-controls.md","sourceDirName":"guides/data-binding","slug":"/guides/data-binding/binding-to-controls","permalink":"/avalonia-docs-ko/docs/guides/data-binding/binding-to-controls","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/guides/data-binding/binding-to-controls.md","tags":[],"version":"current","lastUpdatedBy":"Q","lastUpdatedAt":1755672260000,"frontMatter":{"id":"binding-to-controls","title":"How To Bind to a Control"},"sidebar":"documentationSidebar","previous":{"title":"How To Bind Style Classes","permalink":"/avalonia-docs-ko/docs/guides/data-binding/binding-classes"},"next":{"title":"How to Bind to a Collection","permalink":"/avalonia-docs-ko/docs/guides/data-binding/how-to-bind-to-a-collection"}}');var a=o(74848),i=o(28453);const r={id:"binding-to-controls",title:"How To Bind to a Control"},l="How To Bind to a Control",d={},s=[{value:"Binding to a Named Control",id:"binding-to-a-named-control",level:2},{value:"Binding to an Ancestor",id:"binding-to-an-ancestor",level:2}];function c(e){const n={admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"how-to-bind-to-a-control",children:"How To Bind to a Control"})}),"\n",(0,a.jsxs)(n.p,{children:["With ",(0,a.jsx)(n.em,{children:"Avalonia UI"}),", as well as binding to a data context you can also bind one control directly to another."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsx)(n.p,{children:"Note that this technique does not use a data context at all. When you do this, you are binding directly to another control itself."})}),"\n",(0,a.jsx)(n.h2,{id:"binding-to-a-named-control",children:"Binding to a Named Control"}),"\n",(0,a.jsxs)(n.p,{children:["If you want to bind to a property on another named control, you can use the control name prefixed by a ",(0,a.jsx)(n.code,{children:"#"})," character."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<TextBox Name="other">\n\n\x3c!-- Binds to the Text property of the "other" control --\x3e\n<TextBlock Text="{Binding #other.Text}"/>\n'})}),"\n",(0,a.jsx)(n.p,{children:"This is the equivalent to the long-form binding that will be familiar to WPF and UWP users:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<TextBox Name="other">\n<TextBlock Text="{Binding Text, ElementName=other}"/>\n'})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Avalonia UI"})," supports both syntaxes."]}),"\n",(0,a.jsx)(n.h2,{id:"binding-to-an-ancestor",children:"Binding to an Ancestor"}),"\n",(0,a.jsxs)(n.p,{children:["You can bind to the (logical control tree) parent of the target using the ",(0,a.jsx)(n.code,{children:"$parent"})," syntax:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<Border Tag="Hello World!">\n  <TextBlock Text="{Binding $parent.Tag}"/>\n</Border>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Or to any level of ancestor by using an index with the ",(0,a.jsx)(n.code,{children:"$parent"})," syntax:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<Border Tag="Hello World!">\n  <Border>\n    <TextBlock Text="{Binding $parent[1].Tag}"/>\n  </Border>\n</Border>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The index is zero based so ",(0,a.jsx)(n.code,{children:"$parent[0]"})," is equivalent to ",(0,a.jsx)(n.code,{children:"$parent"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"You can also bind to the closest ancestor of a given type, like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<Border Tag="Hello World!">\n  <Decorator>\n    <TextBlock Text="{Binding $parent[Border].Tag}"/>\n  </Decorator>\n</Border>\n'})}),"\n",(0,a.jsx)(n.p,{children:"Finally, you can combine the index and the type:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<Border Tag="Hello World!">\n  <Border>\n    <Decorator>\n    <TextBlock Text="{Binding $parent[Border;1].Tag}"/>\n    </Decorator>\n  </Border>\n</Border>\n'})}),"\n",(0,a.jsx)(n.p,{children:"If you need to include a XAML namespace in the ancestor type, you separate the namespace and class using a colon, like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<local:MyControl Tag="Hello World!">\n  <Decorator>\n    <TextBlock Text="{Binding $parent[local:MyControl].Tag}"/>\n  </Decorator>\n</local:MyControl>\n'})}),"\n",(0,a.jsxs)(n.p,{children:["To access a property of a parent's ",(0,a.jsx)(n.code,{children:"DataContext"})," it will be necessary to cast it with a casting expression ",(0,a.jsx)(n.code,{children:"(vm:MyUserControlViewModel)DataContext"})," to its actual type. Otherwise ",(0,a.jsx)(n.code,{children:"DataContext"})," would be considered as of type ",(0,a.jsx)(n.code,{children:"object"})," and accessing a custom property would result in an compile-time error."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<local:MyControl Tag="Hello World!">\n  <Decorator>\n    <TextBlock Text="{Binding $parent[local:MyControl].((vm:MyUserControlViewModel)DataContext).CustomProperty}"/>\n  </Decorator>\n</local:MyControl>\n'})}),"\n",(0,a.jsx)(n.admonition,{type:"warning",children:(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.em,{children:"Avalonia UI"})," also supports WPF/UWP's ",(0,a.jsx)(n.code,{children:"RelativeSource"})," syntax which does something similar, but is ",(0,a.jsx)(n.em,{children:"not"})," the same. ",(0,a.jsx)(n.code,{children:"RelativeSource"})," works on the ",(0,a.jsx)(n.em,{children:"visual"})," tree whereas the syntax given here works on the ",(0,a.jsx)(n.em,{children:"logical"})," tree."]})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(c,{...e})}):c(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>l});var t=o(96540);const a={},i=t.createContext(a);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);