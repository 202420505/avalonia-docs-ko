"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[6547],{15389:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"guides/custom-controls/how-to-create-templated-controls","title":"How To Create Templated Controls","description":"Data Binding","source":"@site/docs/guides/custom-controls/how-to-create-templated-controls.md","sourceDirName":"guides/custom-controls","slug":"/guides/custom-controls/how-to-create-templated-controls","permalink":"/docs/guides/custom-controls/how-to-create-templated-controls","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/guides/custom-controls/how-to-create-templated-controls.md","tags":[],"version":"current","lastUpdatedBy":"202420505","lastUpdatedAt":1755588461000,"frontMatter":{"id":"how-to-create-templated-controls","title":"How To Create Templated Controls"},"sidebar":"documentationSidebar","previous":{"title":"How To Create Attached Properties","permalink":"/docs/guides/custom-controls/how-to-create-attached-properties"},"next":{"title":"How To Create a Custom Control","permalink":"/docs/guides/custom-controls/"}}');var a=n(74848),s=n(28453);const r={id:"how-to-create-templated-controls",title:"How To Create Templated Controls"},i="How To Create Templated Controls",l={},c=[{value:"Data Binding",id:"data-binding",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"how-to-create-templated-controls",children:"How To Create Templated Controls"})}),"\n",(0,a.jsx)(t.h2,{id:"data-binding",children:"Data Binding"}),"\n",(0,a.jsx)(t.p,{children:"When you're creating a control template and you want to bind to the templated parent you can use:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",children:'<TextBlock Name="tb" Text="{TemplateBinding Caption}"/>\n\n\x3c!-- Which is the same as --\x3e\n<TextBlock Name="tb" Text="{Binding Caption, RelativeSource={RelativeSource TemplatedParent}}"/>\n'})}),"\n",(0,a.jsx)(t.p,{children:"Although the two syntaxes shown here are equivalent in most cases, there are some differences:"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"TemplateBinding"})," accepts only a single property rather than a property path, so if you want to bind using a property path you must use the second syntax:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",children:'\x3c!-- This WON\'T work as TemplateBinding only accepts single properties --\x3e\n<TextBlock Name="tb" Text="{TemplateBinding Caption.Length}"/>\n\n\x3c!-- Instead this syntax must be used in this case --\x3e\n<TextBlock Name="tb" Text="{Binding Caption.Length, RelativeSource={RelativeSource TemplatedParent}}"/>\n'})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:["A ",(0,a.jsx)(t.code,{children:"TemplateBinding"})," only supports ",(0,a.jsx)(t.code,{children:"OneWay"})," mode for performance reasons (this is the ",(0,a.jsx)(t.a,{href:"https://docs.microsoft.com/en-us/dotnet/desktop/wpf/advanced/templatebinding-markup-extension#remarks",children:"same as WPF"}),"). This means a ",(0,a.jsx)(t.code,{children:"TemplateBinding"})," is actually equivalent to ",(0,a.jsx)(t.code,{children:"{Binding RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"}),". If ",(0,a.jsx)(t.code,{children:"TwoWay"})," binding is required in a control template, the full syntax is needed as shown below. Note that ",(0,a.jsx)(t.code,{children:"Binding"})," will also use the default binding mode unlike ",(0,a.jsx)(t.code,{children:"TemplateBinding"}),"."]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-markup",children:"{Binding RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}\n"})}),"\n"]}),"\n",(0,a.jsxs)(t.li,{children:["\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.code,{children:"TemplateBinding"})," can only be used on ",(0,a.jsx)(t.code,{children:"IStyledElement"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-xml",children:'\x3c!-- This WON\'T work as GeometryDrawing is not a IStyledElement. --\x3e\n<GeometryDrawing Brush="{TemplateBinding Foreground}"/>\n\n\x3c!-- Instead this syntax must be used in this case. --\x3e\n<GeometryDrawing Brush="{Binding Foreground, RelativeSource={RelativeSource TemplatedParent}}"/>\n'})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var o=n(96540);const a={},s=o.createContext(a);function r(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);