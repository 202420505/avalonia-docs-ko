"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[6612],{95131:(n,i,e)=>{e.r(i),e.d(i,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>a,toc:()=>p});const a=JSON.parse('{"id":"advanced/customizing-init","title":"Customizing Initialization","description":"Avalonia provides the AppBuilder API to customize various aspects of the framework.","source":"@site/xpf/advanced/customizing-init.md","sourceDirName":"advanced","slug":"/advanced/customizing-init","permalink":"/xpf/advanced/customizing-init","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/xpf/advanced/customizing-init.md","tags":[],"version":"current","frontMatter":{"id":"customizing-init","title":"Customizing Initialization"},"sidebar":"documentationSidebar","previous":{"title":"Centralized Management","permalink":"/xpf/advanced/centralized-management"},"next":{"title":"Customizing Window decorations","permalink":"/xpf/advanced/customizing-window-decorations"}}');var t=e(74848),s=e(28453);const o={id:"customizing-init",title:"Customizing Initialization"},l=void 0,c={},p=[{value:"Step 1: Disable Automatic XPF Initialization",id:"step-1-disable-automatic-xpf-initialization",level:2},{value:"Step 2: Add a Main Entry-Point",id:"step-2-add-a-main-entry-point",level:2},{value:"Step 3: Set the StartupObject",id:"step-3-set-the-startupobject",level:2},{value:"Custom Assembly Loading",id:"custom-assembly-loading",level:2},{value:"Optional: Define a custom Avalonia Application",id:"optional-define-a-custom-avalonia-application",level:2}];function r(n){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(i.p,{children:["Avalonia provides the ",(0,t.jsx)(i.a,{href:"https://docs.avaloniaui.net/docs/getting-started/application-lifetimes",children:(0,t.jsx)(i.code,{children:"AppBuilder"})})," API to customize various aspects of the framework."]}),"\n",(0,t.jsx)(i.p,{children:"Because XPF is based upon Avalonia, it can be useful to have access to this API in an XPF application."}),"\n",(0,t.jsx)(i.h2,{id:"step-1-disable-automatic-xpf-initialization",children:"Step 1: Disable Automatic XPF Initialization"}),"\n",(0,t.jsxs)(i.p,{children:["In your project file set the ",(0,t.jsx)(i.code,{children:"DisableAutomaticXpfInit"})," property to ",(0,t.jsx)(i.code,{children:"true"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-xml",children:"<PropertyGroup>\n  <DisableAutomaticXpfInit>true</DisableAutomaticXpfInit>\n</PropertyGroup>\n"})}),"\n",(0,t.jsx)(i.h2,{id:"step-2-add-a-main-entry-point",children:"Step 2: Add a Main Entry-Point"}),"\n",(0,t.jsxs)(i.p,{children:["Add a ",(0,t.jsx)(i.code,{children:"Program.cs"})," file containing a ",(0,t.jsx)(i.code,{children:"Main"})," entry-point:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"using Avalonia;\nusing Avalonia.Controls;\nusing Avalonia.Controls.ApplicationLifetimes;\nusing AvaloniaUI.Xpf;\n\nnamespace MyXpfApp;\n\ninternal class Program\n{\n    public static void Main(string[] args)\n    {\n        AppBuilder.Configure<AvaloniaUI.Xpf.Helpers.DefaultXpfAvaloniaApplication>()\n            .UsePlatformDetect()\n            .WithAvaloniaXpf()\n            .SetupWithLifetime(new ClassicDesktopStyleApplicationLifetime\n            { \n                ShutdownMode = ShutdownMode.OnExplicitShutdown \n            });\n\n        App.Main();\n    }\n}\n"})}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsx)(i.p,{children:"Change the namespace in the above example to match your application namespace."})}),"\n",(0,t.jsxs)(i.p,{children:["In the above example ",(0,t.jsx)(i.code,{children:"App"})," is your XPF ",(0,t.jsx)(i.code,{children:"Application"})," class defined in ",(0,t.jsx)(i.code,{children:"App.xaml.cs"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"step-3-set-the-startupobject",children:"Step 3: Set the StartupObject"}),"\n",(0,t.jsxs)(i.p,{children:["Configure your project to use the new ",(0,t.jsx)(i.code,{children:"Main"})," method by adding the following to your ",(0,t.jsx)(i.code,{children:".csproj"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-xml",children:" <PropertyGroup>\n     <StartupObject>MyXpfApp.Program</StartupObject>\n </PropertyGroup>\n"})}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsxs)(i.p,{children:["Change the namespace in the above example to the namespace defined in ",(0,t.jsx)(i.code,{children:"Program.cs"}),"."]})}),"\n",(0,t.jsx)(i.h2,{id:"custom-assembly-loading",children:"Custom Assembly Loading"}),"\n",(0,t.jsxs)(i.p,{children:["If you have a custom mechanism for loading managed assemblies, you may find that using the ",(0,t.jsx)(i.code,{children:"AvaloniaUI.Xpf.WinApiShim.WinApiShimSetup.AutoEnable"})," function causes lock-ups in your app. If that happens, we suggest that you try to use the deferred way of adding assemblies with ",(0,t.jsx)(i.code,{children:"AvaloniaUI.Xpf.WinApiShim.WinApiShimSetup.AddLibrary"})," like so:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"using Avalonia;\nusing Avalonia.Controls;\nusing Avalonia.Controls.ApplicationLifetimes;\nusing AvaloniaUI.Xpf;\nusing AvaloniaUI.Xpf.WinApiShim;\n\nnamespace MyXpfApp;\n\ninternal class Program\n{\n    public void CalledFromYourCustomAssemblyLoading(Assembly targetAssembly)\n    {\n        // This call will add the assembly to the list of assemblies that will \n        // be intercepted with XPF's Win32 Shimming system.\n        WinApiShimSetup.AddLibrary(targetAssembly);\n    }\n}\n"})}),"\n",(0,t.jsx)(i.h2,{id:"optional-define-a-custom-avalonia-application",children:"Optional: Define a custom Avalonia Application"}),"\n",(0,t.jsxs)(i.p,{children:["In certain cases you may want to use a custom Avalonia ",(0,t.jsx)(i.code,{children:"Application"})," class; some use-cases for this scenario are:"]}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"Providing application-wide Avalonia styles and resources"}),"\n",(0,t.jsxs)(i.li,{children:["Providing an application ",(0,t.jsx)(i.code,{children:"NativeMenu"})]}),"\n"]}),"\n",(0,t.jsxs)(i.p,{children:["In order to do this, first add ",(0,t.jsx)(i.code,{children:".cs"})," and ",(0,t.jsx)(i.code,{children:".axaml"})," files for your application class:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",metastring:'title="MyAvaloniaApp.axaml.cs"',children:"using Avalonia;\nusing Avalonia.Markup.Xaml;\nusing Avalonia.Styling;\n\nnamespace MyXpfApp;\n\npublic class MyAvaloniaApp : Application\n{\n    public MyAvaloniaApp()\n    {\n        RequestedThemeVariant = ThemeVariant.Light;\n        AvaloniaXamlLoader.Load(this);\n    }\n}\n"})}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-xml",metastring:'title="MyAvaloniaApp.axaml"',children:'<Application xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             x:Class="MyXpfApp.MyAvaloniaApp">\n  <Application.Styles>\n    <SimpleTheme/>\n  </Application.Styles>\n</Application>\n'})}),"\n",(0,t.jsxs)(i.p,{children:["And then reference this custom Application in the ",(0,t.jsx)(i.code,{children:"AppBuilder"})," configuration added in step 2:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-csharp",children:"// highlight-next-line\nAppBuilder.Configure<MyAvaloniaApp>()\n    .UsePlatformDetect()\n    .WithAvaloniaXpf()\n    .SetupWithLifetime(new ClassicDesktopStyleApplicationLifetime\n    { \n        ShutdownMode = ShutdownMode.OnExplicitShutdown \n    });\n"})})]})}function d(n={}){const{wrapper:i}={...(0,s.R)(),...n.components};return i?(0,t.jsx)(i,{...n,children:(0,t.jsx)(r,{...n})}):r(n)}},28453:(n,i,e)=>{e.d(i,{R:()=>o,x:()=>l});var a=e(96540);const t={},s=a.createContext(t);function o(n){const i=a.useContext(s);return a.useMemo((function(){return"function"==typeof n?n(i):{...i,...n}}),[i,n])}function l(n){let i;return i=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),a.createElement(s.Provider,{value:i},n.children)}}}]);