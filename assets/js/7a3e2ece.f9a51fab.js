"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[2076],{98349:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"get-started/wpf/styling","title":"Styling","description":"The most obvious difference from other XAML frameworks is in its styling system. There are two ways of styling controls in Avalonia:","source":"@site/docs/get-started/wpf/styling.md","sourceDirName":"get-started/wpf","slug":"/get-started/wpf/styling","permalink":"/avalonia-docs-ko/docs/get-started/wpf/styling","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/get-started/wpf/styling.md","tags":[],"version":"current","lastUpdatedBy":"Q","lastUpdatedAt":1755590087000,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Migrating from WPF","permalink":"/avalonia-docs-ko/docs/get-started/wpf/"},"next":{"title":"Data Templates","permalink":"/avalonia-docs-ko/docs/get-started/wpf/datatemplates"}}');var o=s(74848),r=s(28453);const l={},i="Styling",a={},c=[{value:"Example",id:"example",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{XpfAd:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("XpfAd",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"styling",children:"Styling"})}),"\n",(0,o.jsx)(t.p,{children:"The most obvious difference from other XAML frameworks is in its styling system. There are two ways of styling controls in Avalonia:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["A ",(0,o.jsx)(t.a,{href:"../../basics/user-interface/styling",children:(0,o.jsx)(t.code,{children:"Style"})})," is a CSS-like style. Styles aren't stored in a ",(0,o.jsx)(t.code,{children:"Resources"})," collection as in WPF, they are stored in a separate ",(0,o.jsx)(t.code,{children:"Styles"})," collection."]}),"\n",(0,o.jsxs)(t.li,{children:["A ",(0,o.jsx)(t.a,{href:"../../basics/user-interface/styling/control-themes",children:(0,o.jsx)(t.code,{children:"ControlTheme"})})," is similar to a WPF ",(0,o.jsx)(t.code,{children:"Style"})," and is usually used to create themes for lookless controls"]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,o.jsxs)(t.p,{children:["The following code shows a ",(0,o.jsx)(t.code,{children:"UserControl"})," which defines its own CSS-like style."]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-xml",children:'<UserControl>\n    <UserControl.Styles>\n        \x3c!-- Make TextBlocks with the h1 style class have a font size of 24 points --\x3e\n        <Style Selector="TextBlock.h1">\n            <Setter Property="FontSize" Value="24"/>\n        </Style>\n    </UserControl.Styles>\n    <TextBlock Classes="h1">Header</TextBlock>\n</UserControl>\n'})}),"\n",(0,o.jsx)(s,{})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>i});var n=s(96540);const o={},r=n.createContext(o);function l(e){const t=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:l(e.components),n.createElement(r.Provider,{value:t},e.children)}}}]);