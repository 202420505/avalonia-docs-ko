"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[3333],{64495:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"guides/styles-and-resources/how-to-use-fonts","title":"How To Use Custom Fonts","description":"Customizing your Avalonia application with unique fonts can add a distinctive look and feel. This guide will walk you through the process of integrating custom fonts into your Avalonia application.","source":"@site/docs/guides/styles-and-resources/how-to-use-fonts.md","sourceDirName":"guides/styles-and-resources","slug":"/guides/styles-and-resources/how-to-use-fonts","permalink":"/avalonia-docs-ko/docs/guides/styles-and-resources/how-to-use-fonts","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/guides/styles-and-resources/how-to-use-fonts.md","tags":[],"version":"current","lastUpdatedBy":"Q","lastUpdatedAt":1755671977000,"frontMatter":{"id":"how-to-use-fonts","title":"How To Use Custom Fonts"},"sidebar":"documentationSidebar","previous":{"title":"How To Use Theme Variants","permalink":"/avalonia-docs-ko/docs/guides/styles-and-resources/how-to-use-theme-variants"},"next":{"title":"How To Troubleshoot Styles","permalink":"/avalonia-docs-ko/docs/guides/styles-and-resources/troubleshooting"}}');var i=t(74848),s=t(28453);const a={id:"how-to-use-fonts",title:"How To Use Custom Fonts"},r=void 0,c={},l=[{value:"Add Your Custom Font to the Project",id:"add-your-custom-font-to-the-project",level:2},{value:"Declare Your Font in Application Resources",id:"declare-your-font-in-application-resources",level:2},{value:"Use Your Custom Font",id:"use-your-custom-font",level:2},{value:"Adding a Font to the Font Collection",id:"adding-a-font-to-the-font-collection",level:2},{value:"Defining a Font Collection",id:"defining-a-font-collection",level:3},{value:"Adding the Font Collection",id:"adding-the-font-collection",level:3},{value:"Creating Font Packages",id:"creating-font-packages",level:3},{value:"Which Fonts Are Supported?",id:"which-fonts-are-supported",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components},{GitHubSampleLink:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("GitHubSampleLink",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Customizing your Avalonia application with unique fonts can add a distinctive look and feel. This guide will walk you through the process of integrating custom fonts into your Avalonia application."}),"\n",(0,i.jsx)(t,{title:"Google Fonts",link:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/GoogleFonts"}),"\n",(0,i.jsx)(n.h2,{id:"add-your-custom-font-to-the-project",children:"Add Your Custom Font to the Project"}),"\n",(0,i.jsx)(n.p,{children:"Before you can use a custom font, you need to include it in your project."}),"\n",(0,i.jsxs)(n.p,{children:["In this guide, we will be using a font called ",(0,i.jsx)(n.a,{href:"https://fonts.google.com/specimen/Nunito",children:"Nunito"})," which is already stored in our application resources under ",(0,i.jsx)(n.code,{children:"avares://GoogleFonts/Assets/Fonts"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Ensure that the fonts have the build property set to ",(0,i.jsx)(n.code,{children:"AvaloniaResource"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"declare-your-font-in-application-resources",children:"Declare Your Font in Application Resources"}),"\n",(0,i.jsxs)(n.p,{children:["In your Avalonia application, open your ",(0,i.jsx)(n.code,{children:"App.xaml"})," file and include your custom font inside ",(0,i.jsx)(n.code,{children:"<Application.Resources>"}),". Assign it a key, which you will use to reference it in your application. In this case, we have assigned the key ",(0,i.jsx)(n.code,{children:"NunitoFont"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:'title="App.axaml"',children:'<Application xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             x:Class="GoogleFonts.App"\n             RequestedThemeVariant="Default">\n    <Application.Styles>\n        <FluentTheme />\n    </Application.Styles>\n    // highlight-start\n    <Application.Resources>\n        <FontFamily x:Key="NunitoFont">avares://GoogleFonts/Assets/Fonts#Nunito</FontFamily>\n    </Application.Resources>\n     // highlight-end\n</Application>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"use-your-custom-font",children:"Use Your Custom Font"}),"\n",(0,i.jsx)(n.p,{children:"Once your font is declared in your application resources, you can use it in your application."}),"\n",(0,i.jsxs)(n.p,{children:["To reference your custom font, use the ",(0,i.jsx)(n.code,{children:"FontFamily"})," attribute with the ",(0,i.jsx)(n.code,{children:"StaticResource"})," markup extension. You need to pass the key of the declared font as the parameter. In this case, ",(0,i.jsx)(n.code,{children:"NunitoFont"})," is the key for our custom font."]}),"\n",(0,i.jsxs)(n.p,{children:["Here's an example of how to apply our custom ",(0,i.jsx)(n.code,{children:"Nunito"})," font to a ",(0,i.jsx)(n.code,{children:"TextBlock"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<TextBlock Text="{Binding Greeting}" \n           FontSize="70" \n           FontFamily="{StaticResource NunitoFont}" \n           HorizontalAlignment="Center" VerticalAlignment="Center"/>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In the above example, the ",(0,i.jsx)(n.code,{children:"TextBlock"})," control will use the ",(0,i.jsx)(n.code,{children:"Nunito"})," font that we declared in our application resources. The text bound to the ",(0,i.jsx)(n.code,{children:"TextBlock"})," will now appear in the ",(0,i.jsx)(n.code,{children:"Nunito"})," font at the specified font size of 70."]}),"\n",(0,i.jsxs)(n.p,{children:["Remember that the ",(0,i.jsx)(n.code,{children:"FontFamily"})," attribute can be applied to any control that has the ",(0,i.jsx)(n.code,{children:"FontFamily"})," property, meaning you can use your custom font throughout your application."]}),"\n",(0,i.jsx)(n.p,{children:"And that's it! You've successfully integrated a custom font into your Avalonia application. Now you can add a unique touch to your application's UI with the fonts of your choice."}),"\n",(0,i.jsx)(n.h2,{id:"adding-a-font-to-the-font-collection",children:"Adding a Font to the Font Collection"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"EmbeddedFontCollection"})," provides an easy way to add fonts to your application's collection of fonts without requiring a reference to a resource when using them. For example, instead of setting the ",(0,i.jsx)(n.code,{children:"FontFamily"})," to ",(0,i.jsx)(n.code,{children:"{StaticResource NunitoFont}"}),", you can simply reference the name of the font family directly."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<TextBlock\n    Text="{Binding Greeting}"\n    FontSize="70"\n    FontFamily="Nunito"\n    HorizontalAlignment="Center" VerticalAlignment="Center" />\n'})}),"\n",(0,i.jsx)(n.p,{children:"This requires additional setup on application construction, but it removes the need to remember a unique resource key when authoring your controls."}),"\n",(0,i.jsx)(n.h3,{id:"defining-a-font-collection",children:"Defining a Font Collection"}),"\n",(0,i.jsx)(n.p,{children:"First, we need to define a collection of fonts by specifying the font family name and the directory in which the font files reside."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="InterFontCollection.cs"',children:'public sealed class InterFontCollection : EmbeddedFontCollection\n{\n    public InterFontCollection() : base(\n        new Uri("fonts:Inter", UriKind.Absolute),\n        new Uri("avares://Avalonia.Fonts.Inter/Assets", UriKind.Absolute))\n    {\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Here, ",(0,i.jsx)(n.code,{children:"Inter"})," is the name of the font family and ",(0,i.jsx)(n.code,{children:"avares://Avalonia.Fonts.Inter/Assets"})," is the resource locator for the directory containing the font files. The actual names of the font files are not significant since the ",(0,i.jsx)(n.code,{children:"EmbeddedFontCollection"})," will search every file in the given directory and only load those fonts with the given font family name."]}),"\n",(0,i.jsxs)(n.p,{children:["For more information on how to create a resource locator, see ",(0,i.jsx)(n.a,{href:"../../basics/user-interface/assets",children:"Assets"})," for a primer on including assets in your project."]}),"\n",(0,i.jsx)(n.h3,{id:"adding-the-font-collection",children:"Adding the Font Collection"}),"\n",(0,i.jsxs)(n.p,{children:["Next, we need to add this font collection to the application. This can be done by using ",(0,i.jsx)(n.code,{children:"AppBuilder.ConfigureFonts"})," to configure the ",(0,i.jsx)(n.code,{children:"FontManager"})," to include your fonts on application construction."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:"public static class Program\n{\n    [STAThread]\n    public static void Main(string[] args) =>\n        BuildAvaloniaApp()\n            .StartWithClassicDesktopLifetime(args);\n\n    public static AppBuilder BuildAvaloniaApp() =>\n        AppBuilder.Configure<App>()\n            .UsePlatformDetect()\n// highlight-start\n            .ConfigureFonts(fontManager =>\n            {\n                fontManager.AddFontCollection(new InterFontCollection());\n            })\n// highlight-end\n            .LogToTrace();\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"creating-font-packages",children:"Creating Font Packages"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/tree/master/src/Avalonia.Fonts.Inter",children:(0,i.jsx)(n.code,{children:"Avalonia.Fonts.Inter"})})," package shows how you can create a separate project to contain one or many fonts that you might use in multiple projects. Once you have created and published a project similar to this, using the font becomes as simple as appending a method call to your application construction."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",metastring:'title="Program.cs"',children:"public static class Program\n{\n    [STAThread]\n    public static void Main(string[] args) =>\n        BuildAvaloniaApp()\n            .StartWithClassicDesktopLifetime(args);\n\n    public static AppBuilder BuildAvaloniaApp() =>\n        AppBuilder.Configure<App>()\n            .UsePlatformDetect()\n// highlight-start\n            .WithInterFont()\n// highlight-end\n            .LogToTrace();\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"which-fonts-are-supported",children:"Which Fonts Are Supported?"}),"\n",(0,i.jsxs)(n.p,{children:["Most TrueType (",(0,i.jsx)(n.code,{children:".ttf"}),") and OpenType (",(0,i.jsx)(n.code,{children:".otf"}),", ",(0,i.jsx)(n.code,{children:".ttf"}),') fonts are supported. However, some font features, such as "Variable fonts" are not currently supported (see: ',(0,i.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/issues/11092",children:"Issue #11092"}),")."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var o=t(96540);const i={},s=o.createContext(i);function a(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);