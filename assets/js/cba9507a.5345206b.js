"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[533],{44407:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>o,default:()=>a,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"reference/gestures/pullgesturerecognizer","title":"PullGestureRecognizer","description":"REFERENCE - Gestures","source":"@site/docs/reference/gestures/pullgesturerecognizer.md","sourceDirName":"reference/gestures","slug":"/reference/gestures/pullgesturerecognizer","permalink":"/avalonia-docs-ko/docs/reference/gestures/pullgesturerecognizer","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/reference/gestures/pullgesturerecognizer.md","tags":[],"version":"current","lastUpdatedBy":"202420505","lastUpdatedAt":1755602100000,"frontMatter":{"description":"REFERENCE - Gestures"},"sidebar":"documentationSidebar","previous":{"title":"PinchGestureRecognizer","permalink":"/avalonia-docs-ko/docs/reference/gestures/pinchgesturerecognizer"},"next":{"title":"ScrollGestureRecognizer","permalink":"/avalonia-docs-ko/docs/reference/gestures/scrollgesturerecognizer"}}');var s=n(74848),l=n(28453);const i={description:"REFERENCE - Gestures"},o="PullGestureRecognizer",c={},d=[{value:"Using a PullGestureRecognizer",id:"using-a-pullgesturerecognizer",level:2},{value:"PullDirection",id:"pulldirection",level:3},{value:"Binding Events",id:"binding-events",level:2},{value:"Useful Properties",id:"useful-properties",level:2},{value:"More Information",id:"more-information",level:2}];function u(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"pullgesturerecognizer",children:"PullGestureRecognizer"})}),"\n",(0,s.jsxs)(r.p,{children:["A gesture recognizer that tracks a pull gesture. A pull gesture occurs when a pointer is dragged from the edge of a control. The direction of the pull is defined by the ",(0,s.jsx)(r.code,{children:"PullDirection"})," property."]}),"\n",(0,s.jsx)(r.h2,{id:"using-a-pullgesturerecognizer",children:"Using a PullGestureRecognizer"}),"\n",(0,s.jsxs)(r.p,{children:["A PullGestureRecognizer can be attached to a control using the control's ",(0,s.jsx)(r.code,{children:"GestureRecognizers"})," property."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-xml",children:'<Border Width="500"\n        Height="500"\n        Margin="5"\n        Name="border">\n  <Border.GestureRecognizers>\n    <PullGestureRecognizer PullDirection="TopToBottom"/>\n  </Border.GestureRecognizers>\n</Border>\n'})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:"title='C#'",children:"border.GestureRecognizers.Add(new PullGestureRecognizer()\n            {\n                PullDirection = PullDirection.TopToBottom,\n            });\n"})}),"\n",(0,s.jsxs)(r.p,{children:["The PullGestureRecognizer raises a ",(0,s.jsx)(r.code,{children:"Gestures.PullGestureEvent"})," when it detects the start of a pull gesture. When the pull ends, from the pointer being released or another gesture start, it raises a ",(0,s.jsx)(r.code,{children:"Gestures.PullGestureEndedEvent"}),"."]}),"\n",(0,s.jsx)(r.h3,{id:"pulldirection",children:"PullDirection"}),"\n",(0,s.jsx)(r.p,{children:"This defines the direction of the pull. There are 4 available values;"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"PullDirection.TopToBottom"})," : Pull starts from the top edge and moves towards the bottom"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"PullDirection.BottomToTop"})," : Pull starts from the bottom edge and moves towards the top"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"PullDirection.LeftToRight"})," : Pull starts from the left edge and moves towards the right"]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"PullDirection.RightToLeft"})," : Pull starts from the right edge and moves towards the left"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"binding-events",children:"Binding Events"}),"\n",(0,s.jsx)(r.p,{children:"After the PullGestureRecognizer has been added to your control, you need to bind them in your code behind either through an inline handler or to an event function:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:"title='C#'",children:"image.AddHandler(Gestures.PullGestureEvent, (s, e) => { });\nimage.AddHandler(Gestures.PullGestureEndedEvent, (s, e) => { });\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:"title='C#'",children:"image.AddHandler(Gestures.PullGestureEvent, Image_PullGesture);\nimage.AddHandler(Gestures.PullGestureEndedEvent, Image_PullGestureEnded);\n...\nprivate void Image_PullGesture(object? sender, PullGestureEventArgs e) { }\nprivate void Image_PullGestureEnded(object? sender, PullGestureEndedEventArgs e) { }\n"})}),"\n",(0,s.jsx)(r.p,{children:"If your event handles the gesture completely, you can mark the event as handled by setting:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-csharp",metastring:"title='C#'",children:"e.Handled = true;\n"})}),"\n",(0,s.jsx)(r.h2,{id:"useful-properties",children:"Useful Properties"}),"\n",(0,s.jsx)(r.p,{children:"You will probably use these properties most often:"}),"\n",(0,s.jsxs)("table",{children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{width:"266",children:"Property"}),(0,s.jsx)("th",{children:"Description"})]})}),(0,s.jsx)("tbody",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:"PullDirection"}),(0,s.jsx)("td",{children:"Defines the direction of the pull gesture. "})]})})]}),"\n",(0,s.jsx)(r.h2,{id:"more-information",children:"More Information"}),"\n",(0,s.jsxs)(r.admonition,{type:"info",children:[(0,s.jsxs)(r.p,{children:["View the source code on ",(0,s.jsx)(r.em,{children:"GitHub"})]}),(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Base/Input/GestureRecognizers/PullGestureRecognizer.cs",children:(0,s.jsx)(r.code,{children:"PullGestureRecognizer.cs"})})}),(0,s.jsx)(r.p,{children:(0,s.jsx)(r.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Base/Input/PullGestureEventArgs.cs",children:(0,s.jsx)(r.code,{children:"PullGestureEventArgs.cs"})})})]})]})}function a(e={}){const{wrapper:r}={...(0,l.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var t=n(96540);const s={},l=t.createContext(s);function i(e){const r=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(l.Provider,{value:r},e.children)}}}]);