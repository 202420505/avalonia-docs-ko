"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[7321],{66237:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>d,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"guides/styles-and-resources/setter-precedence","title":"Setter Precedence","description":"Avalonia Setters are applied in order of BindingPriority, then visual tree locality, and finally the Styles collection","source":"@site/docs/guides/styles-and-resources/setter-precedence.md","sourceDirName":"guides/styles-and-resources","slug":"/guides/styles-and-resources/setter-precedence","permalink":"/avalonia-docs-ko/docs/guides/styles-and-resources/setter-precedence","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/guides/styles-and-resources/setter-precedence.md","tags":[],"version":"current","lastUpdatedBy":"Q","lastUpdatedAt":1755603059000,"frontMatter":{"id":"setter-precedence","title":"Setter Precedence"},"sidebar":"documentationSidebar","previous":{"title":"Property Setters","permalink":"/avalonia-docs-ko/docs/guides/styles-and-resources/property-setters"},"next":{"title":"How to Use Included Styles","permalink":"/avalonia-docs-ko/docs/guides/styles-and-resources/how-to-use-included-styles"}}');var i=t(74848),o=t(28453);const l=t.p+"assets/images/setter-precedence-animation-wrong-1ad4a33c4e9807cb5dd613309246f201.gif",s=t.p+"assets/images/setter-precedence-animation-correct-af3510217340cc2be4be339bcf9530bb.gif",d={id:"setter-precedence",title:"Setter Precedence"},a=void 0,c={},h=[{value:"BindingPriority Values",id:"bindingpriority-values",level:2},{value:"How is BindingPriority Assigned Within XAML?",id:"how-is-bindingpriority-assigned-within-xaml",level:2},{value:"Animation",id:"animation",level:3},{value:"LocalValue",id:"localvalue",level:3},{value:"StyleTrigger",id:"styletrigger",level:3},{value:"Template",id:"template",level:3},{value:"Style",id:"style",level:3},{value:"Inherited",id:"inherited",level:3},{value:"Visual Tree Locality",id:"visual-tree-locality",level:2},{value:"Styles Collection Order",id:"styles-collection-order",level:2},{value:"BindingPriority Does Not Propagate",id:"bindingpriority-does-not-propagate",level:2}];function u(e){const n={admonition:"admonition",code:"code",del:"del",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Avalonia ",(0,i.jsx)(n.code,{children:"Setters"})," are applied in order of ",(0,i.jsx)(n.code,{children:"BindingPriority"}),", then visual tree locality, and finally the ",(0,i.jsx)(n.code,{children:"Styles"})," collection\norder. Precedence applies individually to each ",(0,i.jsx)(n.code,{children:"StyledProperty"})," so that styling can benefit from composition. ",(0,i.jsx)(n.code,{children:"DirectProperty"}),"\nand CLR properties cannot be styled and therefore do not participate in this precedence."]}),"\n",(0,i.jsx)(n.h2,{id:"bindingpriority-values",children:"BindingPriority Values"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"Animation = -1, // Highest priority\nLocalValue = 0,\nStyleTrigger,\nTemplate,\nStyle,\nInherited,\nUnset = int.MaxValue, // Lowest priority\n"})}),"\n",(0,i.jsx)(n.h2,{id:"how-is-bindingpriority-assigned-within-xaml",children:"How is BindingPriority Assigned Within XAML?"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"BindingPriority"})," cannot be explicitly set in XAML. The following examples demonstrate how ",(0,i.jsx)(n.code,{children:"BindingPriority"})," is\nimplicitly assigned across each scenario. This is crucial for designing and troubleshooting styles that work as expected."]}),"\n",(0,i.jsx)(n.h3,{id:"animation",children:"Animation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Animation"})," has the highest ",(0,i.jsx)(n.code,{children:"BindingPriority"})," and is applied to ",(0,i.jsx)(n.code,{children:"Setter"}),"s within a ",(0,i.jsx)(n.code,{children:"Keyframe"})," and generally throughout the\nTransitions system."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Button Background="Green" Content="Bounces from Red to Blue">\n    <Button.Styles>\n        <Style Selector="Button">\n            <Style.Animations>\n                <Animation IterationCount="Infinite" Duration="0:0:2">\n                    <KeyFrame Cue="0%">\n                        <Setter Property="Background" Value="Red" />\n                    </KeyFrame>\n                    <KeyFrame Cue="100%">\n                        <Setter Property="Background" Value="Blue" />\n                    </KeyFrame>\n                </Animation>\n            </Style.Animations>\n        </Style>\n    </Button.Styles>\n</Button>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"localvalue",children:"LocalValue"}),"\n",(0,i.jsxs)(n.p,{children:["Assigned when a XAML property is directly set outside of a ",(0,i.jsx)(n.code,{children:"ControlTemplate"}),". Both ",(0,i.jsx)(n.code,{children:"Background"})," ",(0,i.jsx)(n.code,{children:"Setter"}),"s below will\nhave ",(0,i.jsx)(n.code,{children:"LocalValue"})," priority."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Button Background="Orange" />\n<Button Background="{DynamicResource ButtonBrush}" />\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Resource markup extensions do not have any effect on priority."})}),"\n",(0,i.jsx)(n.h3,{id:"styletrigger",children:"StyleTrigger"}),"\n",(0,i.jsxs)(n.p,{children:["When a ",(0,i.jsx)(n.code,{children:"Selector"})," has conditional activation, the ",(0,i.jsx)(n.code,{children:"Setter"}),"'s ",(0,i.jsx)(n.code,{children:"BindingPriority"})," is promoted from ",(0,i.jsx)(n.code,{children:"Style"})," to\n",(0,i.jsx)(n.code,{children:"StyleTrigger"}),". Two selectors with any conditional activation will have equal priority regardless of the number of\nactivators present and the position of the activator within the selector syntax. Avalonia doesn't have CSS's concept\nof Specificity."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Style Selector="Button:pointerover /template/ ContentPresenter#PART_ContentPresenter">\n    <Setter Property="Background" Value="Orange" />\n</Style>\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Style class, pseudo class, child position, and property match selectors are conditional. Control name selectors are not conditional."})}),"\n",(0,i.jsx)(n.h3,{id:"template",children:"Template"}),"\n",(0,i.jsxs)(n.p,{children:["When a property is directly set within a ",(0,i.jsx)(n.code,{children:"ControlTemplate"}),". ",(0,i.jsx)(n.code,{children:"BorderThickness"}),", ",(0,i.jsx)(n.code,{children:"Background"}),", and ",(0,i.jsx)(n.code,{children:"Padding"})," below have ",(0,i.jsx)(n.code,{children:"Template"})," priority."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<ControlTemplate>\n    <Border BorderThickness="2">\n        <Button Background="{DynamicResource ButtonBrush}" Padding="{TemplateBinding Padding}" />\n    </Border>\n</ControlTemplate>\n'})}),"\n",(0,i.jsx)(n.h3,{id:"style",children:"Style"}),"\n",(0,i.jsxs)(n.p,{children:["When a ",(0,i.jsx)(n.code,{children:"Setter"})," is defined within a ",(0,i.jsx)(n.code,{children:"Style"})," without conditional activation."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Style Selector="Button /template/ ContentPresenter#PART_ContentPresenter">\n    <Setter Property="Background" Value="Orange" />\n</Style>\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.p,{children:["Especially noteworthy is the lower priority than ",(0,i.jsx)(n.code,{children:"Template"}),". Therefore, these selectors cannot be used to override the\nproperties mentioned in the ",(0,i.jsx)(n.code,{children:"Template"})," example above."]})}),"\n",(0,i.jsx)(n.h3,{id:"inherited",children:"Inherited"}),"\n",(0,i.jsxs)(n.p,{children:["When a property is not set, it may inherit the property value from its parent. This must be specified during\nproperty registration or with ",(0,i.jsx)(n.code,{children:"OverrideMetadata"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cs",children:"public static readonly StyledProperty<bool> UseLayoutRoundingProperty =\n    AvaloniaProperty.Register<Layoutable, bool>(\n        nameof(UseLayoutRounding),\n        defaultValue: true,\n        inherits: true);\n"})}),"\n",(0,i.jsx)(n.h2,{id:"visual-tree-locality",children:"Visual Tree Locality"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"Setter"}),"s with equal ",(0,i.jsx)(n.code,{children:"BindingPriority"})," are then selected by their location in the Visual Tree relative to the ",(0,i.jsx)(n.code,{children:"Control"}),". The\n",(0,i.jsx)(n.code,{children:"Setter"})," with the fewest nodes required to traverse upwards to locate will take precedence. Inline style ",(0,i.jsx)(n.code,{children:"Setter"}),"s have\nthe highest precedence for this step."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<Window>\n    <Window.Styles>\n        <Style Selector="Button">\n            <Setter Property="FontSize" Value="16" />\n            <Setter Property="Foreground" Value="Red" />\n        </Style>\n    </Window.Styles>\n    <StackPanel>\n        <StackPanel.Styles>\n            <Style Selector="Button">\n                <Setter Property="FontSize" Value="24" />\n            </Style>\n        </StackPanel.Styles>\n\n        <Button Content="This Has FontSize=24 with Foreground=Red" />\n    </StackPanel>\n</Window>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"styles-collection-order",children:"Styles Collection Order"}),"\n",(0,i.jsxs)(n.p,{children:["When ",(0,i.jsx)(n.code,{children:"BindingPriority"})," and visual tree locality are both equal, the final decider is the order within the ",(0,i.jsx)(n.code,{children:"Styles"}),"\ncollection. The last applicable ",(0,i.jsx)(n.code,{children:"Setter"})," will take precedence."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<StackPanel>\n    <StackPanel.Styles>\n        <Style Selector="Button.small">\n            <Setter Property="FontSize" Value="12" />\n        </Style>\n        <Style Selector="Button.big">\n            <Setter Property="FontSize" Value="24" />\n        </Style>\n    </StackPanel.Styles>\n\n    <Button Classes="small big" Content="This Has FontSize=24" />\n    <Button Classes="big small" Content="This Also Has FontSize=24" />\n</StackPanel>\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsx)(n.p,{children:"These Buttons specify their Classes in different order, but that has no effect on Setter Precedence."})}),"\n",(0,i.jsx)(n.h2,{id:"bindingpriority-does-not-propagate",children:"BindingPriority Does Not Propagate"}),"\n",(0,i.jsxs)(n.p,{children:["Recall the ",(0,i.jsx)(n.code,{children:"Animation"})," example above. If you hover, the animated background is replaced with a static background\ndespite ",(0,i.jsx)(n.code,{children:"BindingPriority.Animation"})," having the highest priority. This is because the ",(0,i.jsx)(n.code,{children:"Selector"})," targets the wrong\n",(0,i.jsx)(n.code,{children:"Control"}),". Examining the ",(0,i.jsx)(n.code,{children:"ControlTheme"})," is necessary to diagnose the cause."]}),"\n",(0,i.jsx)("img",{src:l,alt:""}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='ControlTheme for Button, Trimmed'",children:'<ControlTheme x:Key="{x:Type Button}" TargetType="Button">\n    <Setter Property="Background" Value="{DynamicResource ButtonBackground}"/>\n    <Setter Property="Template">\n        <ControlTemplate>\n            <ContentPresenter x:Name="PART_ContentPresenter"\n                              Background="{TemplateBinding Background}"/>\n        </ControlTemplate>\n    </Setter>\n\n    <Style Selector="^:pointerover /template/ ContentPresenter#PART_ContentPresenter">\n        <Setter Property="Background" Value="{DynamicResource ButtonBackgroundPointerOver}"/>\n    </Style>\n</ControlTheme>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["The top ",(0,i.jsx)(n.code,{children:"Setter"})," applies the ",(0,i.jsx)(n.code,{children:"ButtonBackground"})," to the ",(0,i.jsx)(n.code,{children:"Button"})," with ",(0,i.jsx)(n.code,{children:"Style"})," priority. The ",(0,i.jsx)(n.code,{children:"Background"})," rendering is\nhandled by the ",(0,i.jsx)(n.code,{children:"ContentPresenter"})," which has a ",(0,i.jsx)(n.code,{children:"Template"})," priority. It fetches the ",(0,i.jsx)(n.code,{children:"ButtonBackground"})," which has been\napplied to ",(0,i.jsx)(n.code,{children:"Button"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["However, when the ",(0,i.jsx)(n.code,{children:"Button"})," is hovered, the ",(0,i.jsx)(n.code,{children:":pointerover"})," ",(0,i.jsx)(n.code,{children:"Selector"})," is activated with its ",(0,i.jsx)(n.code,{children:"StyleTrigger"}),"\npriority, overrides the ",(0,i.jsx)(n.code,{children:"TemplateBinding"}),", and fetches ",(0,i.jsx)(n.code,{children:"ButtonBackgroundPointerOver"})," instead. This circumvents\nfetching the ",(0,i.jsx)(n.code,{children:"Button"}),"'s ",(0,i.jsx)(n.code,{children:"Background"})," that our original ",(0,i.jsx)(n.code,{children:"Animation"})," ",(0,i.jsx)(n.code,{children:"Selector"})," targeted. This is summarized in the following table:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Background Setters and Styles While Hovered"}),(0,i.jsx)(n.th,{children:"Priority"}),(0,i.jsx)(n.th,{children:"Location"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.del,{children:'Background="Green"'})}),(0,i.jsx)(n.td,{children:"LocalValue"}),(0,i.jsx)(n.td,{children:"Button"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:'Background="Red"'}),(0,i.jsx)(n.td,{children:"Animation (Overrides LocalValue)"}),(0,i.jsx)(n.td,{children:"Keyframe"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.del,{children:(0,i.jsx)(n.code,{children:'<ContentPresenter Background="{TemplateBinding Background}"/>'})})}),(0,i.jsx)(n.td,{children:"Template"}),(0,i.jsx)(n.td,{children:"ControlTemplate"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"^:pointerover /template/ ContentPresenter#PART_ContentPresenter"})}),(0,i.jsx)(n.td,{children:"StyleTrigger (Overrides Template)"}),(0,i.jsx)(n.td,{children:"ControlTheme"})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Instead, we should target the ",(0,i.jsx)(n.code,{children:"ContentPresenter"})," with a ",(0,i.jsx)(n.code,{children:"Setter"})," that has priority of at least ",(0,i.jsx)(n.code,{children:"StyleTrigger"}),". ",(0,i.jsx)(n.code,{children:"BindingPriority.Animation"}),"\nfits that. This is an observation that cannot be made without examining the original ",(0,i.jsx)(n.code,{children:"ControlTemplate"})," and emphasizes that relying\non priority alone is insufficient to effectively style an application."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",metastring:"title='Corrected to override :pointerover priority'",children:'<Button Background="Green" Content="Bounces from Red to Blue">\n    <Button.Styles>\n        <Style Selector="Button /template/ ContentPresenter#PART_ContentPresenter">\n            <Style.Animations>\n                <Animation IterationCount="Infinite" Duration="0:0:2">\n                    <KeyFrame Cue="0%">\n                        <Setter Property="Background" Value="Red" />\n                    </KeyFrame>\n                    <KeyFrame Cue="100%">\n                        <Setter Property="Background" Value="Blue" />\n                    </KeyFrame>\n                </Animation>\n            </Style.Animations>\n        </Style>\n    </Button.Styles>\n</Button>\n'})}),"\n",(0,i.jsx)("img",{src:s,alt:""})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>s});var r=t(96540);const i={},o=r.createContext(i);function l(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);