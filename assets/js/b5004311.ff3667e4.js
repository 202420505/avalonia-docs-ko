"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[9389],{85418:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>b,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"guides/data-binding/how-to-bind-to-a-collection","title":"How to Bind to a Collection","description":"Binding to a collection in Avalonia UI is an effective way to display dynamic data. This guide will demonstrate how to bind an ObservableCollection to a control, like a ListBox or ItemsControl, to show a list of items.","source":"@site/docs/guides/data-binding/how-to-bind-to-a-collection.md","sourceDirName":"guides/data-binding","slug":"/guides/data-binding/how-to-bind-to-a-collection","permalink":"/avalonia-docs-ko/docs/guides/data-binding/how-to-bind-to-a-collection","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/guides/data-binding/how-to-bind-to-a-collection.md","tags":[],"version":"current","lastUpdatedBy":"202420505","lastUpdatedAt":1755602100000,"frontMatter":{"id":"how-to-bind-to-a-collection","title":"How to Bind to a Collection"},"sidebar":"documentationSidebar","previous":{"title":"How To Bind to a Control","permalink":"/avalonia-docs-ko/docs/guides/data-binding/binding-to-controls"},"next":{"title":"How To Bind from Code","permalink":"/avalonia-docs-ko/docs/guides/data-binding/binding-from-code"}}');var i=o(74848),l=o(28453);const a={id:"how-to-bind-to-a-collection",title:"How to Bind to a Collection"},s="How to Bind to a Collection",c={},d=[{value:"Binding to a Simple ObservableCollection",id:"binding-to-a-simple-observablecollection",level:2},{value:"Binding to an ObservableCollection of Complex Objects",id:"binding-to-an-observablecollection-of-complex-objects",level:2}];function r(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"how-to-bind-to-a-collection",children:"How to Bind to a Collection"})}),"\n",(0,i.jsxs)(n.p,{children:["Binding to a collection in Avalonia UI is an effective way to display dynamic data. This guide will demonstrate how to bind an ",(0,i.jsx)(n.code,{children:"ObservableCollection"})," to a control, like a ",(0,i.jsx)(n.code,{children:"ListBox"})," or ",(0,i.jsx)(n.code,{children:"ItemsControl"}),", to show a list of items."]}),"\n",(0,i.jsx)(n.h2,{id:"binding-to-a-simple-observablecollection",children:"Binding to a Simple ObservableCollection"}),"\n",(0,i.jsxs)(n.p,{children:["For a start, consider you have an ",(0,i.jsx)(n.code,{children:"ObservableCollection<string>"})," and you want to bind it to a ",(0,i.jsx)(n.code,{children:"ListBox"})," to display a list of string items."]}),"\n",(0,i.jsxs)(n.p,{children:["Here's an example ",(0,i.jsx)(n.code,{children:"ViewModel"})," with an ",(0,i.jsx)(n.code,{children:"ObservableCollection<string>"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class ViewModel : ObservableObject\n{\n    private ObservableCollection<string> _items;\n\n    public ObservableCollection<string> Items\n    {\n        get { return _items; }\n        set { SetProperty(ref _items, value); }\n    }\n\n    public ViewModel()\n    {\n        Items = new ObservableCollection<string> { "Item 1", "Item 2", "Item 3" };\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In your view, you can bind this ",(0,i.jsx)(n.code,{children:"ObservableCollection"})," to a ",(0,i.jsx)(n.code,{children:"ListBox"})," like so:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<ListBox ItemsSource="{Binding Items}"/>\n'})}),"\n",(0,i.jsx)(n.h2,{id:"binding-to-an-observablecollection-of-complex-objects",children:"Binding to an ObservableCollection of Complex Objects"}),"\n",(0,i.jsxs)(n.p,{children:["But what if your ",(0,i.jsx)(n.code,{children:"ObservableCollection"})," contains complex objects that themselves need to propagate changes? Let's modify our ",(0,i.jsx)(n.code,{children:"ViewModel"})," to accommodate this scenario."]}),"\n",(0,i.jsxs)(n.p,{children:["Consider a ",(0,i.jsx)(n.code,{children:"Person"})," class:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:"public class Person : ObservableObject\n{\n    private string _name;\n    private int _age;\n\n    public string Name\n    {\n        get { return _name; }\n        set { SetProperty(ref _name, value); }\n    }\n\n    public int Age\n    {\n        get { return _age; }\n        set { SetProperty(ref _age, value); }\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["And an ",(0,i.jsx)(n.code,{children:"ObservableCollection<Person>"})," in our ViewModel:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-csharp",children:'public class ViewModel : ObservableObject\n{\n    private ObservableCollection<Person> _people;\n\n    public ObservableCollection<Person> People\n    {\n        get { return _people; }\n        set { SetProperty(ref _people, value); }\n    }\n\n    public ViewModel()\n    {\n        People = new ObservableCollection<Person> \n        {\n            new Person { Name = "John Doe", Age = 30 },\n            new Person { Name = "Jane Doe", Age = 28 }\n        };\n    }\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["You can bind this ",(0,i.jsx)(n.code,{children:"ObservableCollection"})," to a ",(0,i.jsx)(n.code,{children:"ListBox"})," in your view, and use a ",(0,i.jsx)(n.code,{children:"DataTemplate"})," to specify how each ",(0,i.jsx)(n.code,{children:"Person"})," should be presented:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-xml",children:'<ListBox ItemsSource="{Binding People}">\n    <ListBox.ItemTemplate>\n        <DataTemplate>\n            <StackPanel Orientation="Horizontal">\n                <TextBlock Text="{Binding Name}" Margin="0,0,10,0"/>\n                <TextBlock Text="{Binding Age}"/>\n            </StackPanel>\n        </DataTemplate>\n    </ListBox.ItemTemplate>\n</ListBox>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["In this scenario, each ",(0,i.jsx)(n.code,{children:"Person"})," in the list will be displayed with their ",(0,i.jsx)(n.code,{children:"Name"})," and ",(0,i.jsx)(n.code,{children:"Age"})," separated by a small margin. If any of items properties change, the ",(0,i.jsx)(n.code,{children:"ListBox"})," item will automatically update."]})]})}function b(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(r,{...e})}):r(e)}},28453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>s});var t=o(96540);const i={},l=t.createContext(i);function a(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);