"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[3102],{67007:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"guides/platforms/how-to-use-web-assembly","title":"Web Assembly","description":"Run in the browser with WebAssembly","source":"@site/docs/guides/platforms/how-to-use-web-assembly.md","sourceDirName":"guides/platforms","slug":"/guides/platforms/how-to-use-web-assembly","permalink":"/avalonia-docs-ko/docs/guides/platforms/how-to-use-web-assembly","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/guides/platforms/how-to-use-web-assembly.md","tags":[],"version":"current","lastUpdatedBy":"Q","lastUpdatedAt":1755671977000,"frontMatter":{"id":"how-to-use-web-assembly","title":"Web Assembly"},"sidebar":"documentationSidebar","previous":{"title":"Running on Raspberry Pi with Raspbian Lite","permalink":"/avalonia-docs-ko/docs/guides/platforms/rpi/running-on-raspbian-lite-via-drm"},"next":{"title":"macOS Development","permalink":"/avalonia-docs-ko/docs/guides/platforms/macos-development"}}');var s=t(74848),r=t(28453);const l={id:"how-to-use-web-assembly",title:"Web Assembly"},a="\ud83d\udc49 Web Assembly",i={},d=[{value:"Deployment",id:"deployment",level:3},{value:"Testing AppBundle locally",id:"testing-appbundle-locally",level:4},{value:"Interop",id:"interop",level:2},{value:"Legacy Blazor backend",id:"legacy-blazor-backend",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"-web-assembly",children:"\ud83d\udc49 Web Assembly"})}),"\n",(0,s.jsx)(n.p,{children:"Run in the browser with WebAssembly"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Install ",(0,s.jsx)(n.code,{children:"wasm-tools"})," workload tools. See ",(0,s.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/core/tools/dotnet-workload-install",children:"dotnet documentation"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet workload install wasm-tools\n"})}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["If you are running ",(0,s.jsx)(n.code,{children:"net8.0-browser"})," application on .NET 9 SDK, you should install ",(0,s.jsx)(n.code,{children:"wasm-tools-net8"})," workload instead.\nIf you have an older .NET SDK, it might ask you to install other workloads like ",(0,s.jsx)(n.code,{children:"wasm-experimental"})," as well."]})}),"\n",(0,s.jsxs)(n.ol,{start:"2",children:["\n",(0,s.jsx)(n.li,{children:"Install or update the dotnet templates to the latest version."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet new install avalonia.templates\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:"Create a new directory for the project."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"mkdir BrowserTest\ncd BrowserTest\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"4",children:["\n",(0,s.jsxs)(n.li,{children:["Generate a new project that supports running in the browser. To lookup the available templates via ",(0,s.jsx)(n.code,{children:"dotnet new list"})," see ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/core/tools/dotnet-new-sdk-templates",children:"dotnet documentation"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet new avalonia.xplat\n"})}),"\n",(0,s.jsxs)(n.ol,{start:"5",children:["\n",(0,s.jsx)(n.li,{children:"In the console output you will see HTTP and HTTPS links to open the app.\nIn order to run, simply do the following:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd BrowserTest.Browser\ndotnet run\n\n# Output:\n# App url: http://127.0.0.1:53576/\n# App url: https://127.0.0.1:53577/\n# Debug at url: http://127.0.0.1:53576/_framework/debug\n# Debug at url: https://127.0.0.1:53577/_framework/debug\n"})}),"\n",(0,s.jsx)(n.h3,{id:"deployment",children:"Deployment"}),"\n",(0,s.jsxs)(n.p,{children:["In the ",(0,s.jsx)(n.code,{children:"BrowserTest.Browser"})," directory, run:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet publish\n"})}),"\n",(0,s.jsxs)(n.p,{children:["After project was published, .NET SDK creates an app bundle directory with ",(0,s.jsx)(n.code,{children:"index.html"})," file and compiled application files.\nWith latest .NET 9 SDK, this directory is located at ",(0,s.jsx)(n.code,{children:"bin/Release/net9.0-browser/publish/wwwroot"}),'. If your project targets "net8.0-browser", use ',(0,s.jsx)(n.code,{children:"net8.0-browser"})," directory.\nNow you can serve your app from this directory using your favorite web server (such as Azure Static Web Apps)."]}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["On older .NET SDK versions, app bundle was located in different directory: ",(0,s.jsx)(n.code,{children:"bin/Release/net8.0-browser/browser-wasm/AppBundle"})," (search for ",(0,s.jsx)(n.code,{children:"AppBundle"}),")."]})}),"\n",(0,s.jsx)(n.admonition,{type:"warning",children:(0,s.jsxs)(n.p,{children:["Currently using ",(0,s.jsx)(n.code,{children:"dotnet publish"})," with the ",(0,s.jsx)(n.code,{children:"-o"})," or ",(0,s.jsx)(n.code,{children:"--output"})," flag does not produce the AppBundle folder in the output directory. (See ",(0,s.jsx)(n.a,{href:"https://github.com/dotnet/runtime/issues/94319",children:"this issue"}),".) You'll still have to grab it out of the ",(0,s.jsx)(n.code,{children:"bin"})," directory at the path specified by the publish output."]})}),"\n",(0,s.jsx)(n.h4,{id:"testing-appbundle-locally",children:"Testing AppBundle locally"}),"\n",(0,s.jsxs)(n.p,{children:["You can serve your wasm app from this directly using the ",(0,s.jsx)(n.a,{href:"https://github.com/natemcmaster/dotnet-serve",children:"dotnet-serve"})," tool as follows:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"dotnet tool install --global dotnet-serve\n\ndotnet serve -d:bin/Release/net9.0-browser/publish/wwwroot\n\n# Output: \n# Starting server, serving bin/Release/net9.0-browser/publish/wwwroot\n# Listening on any IP:\n#   http://localhost:49875\n"})}),"\n",(0,s.jsx)(n.h2,{id:"interop",children:"Interop"}),"\n",(0,s.jsxs)(n.p,{children:["It is possible to call JavaScript code from the Avalonia Web application. Avalonia app is compatible with standard ",(0,s.jsx)(n.strong,{children:"[JSImport]/[JSExport]"})," interop from Microsoft. You can find more information on ",(0,s.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/aspnet/core/blazor/javascript-interoperability/import-export-interop?view=aspnetcore-7.0",children:"their documentation"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"legacy-blazor-backend",children:"Legacy Blazor backend"}),"\n",(0,s.jsxs)(n.p,{children:["Starting from Avalonia 11.0 ",(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Avalonia.Browser/",children:"Avalonia.Browser"})," package relies on build-in .NET interop with better stability and performance. Legacy Blazor backend is still available for compatibility and can be referenced using ",(0,s.jsx)(n.a,{href:"https://www.nuget.org/packages/Avalonia.Browser.Blazor/",children:"Avalonia.Browser.Blazor"})," package."]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsxs)(n.p,{children:["If you have not performed the step to install required workloads, you might encounter errors when running the app in your browser later (e.g. ",(0,s.jsx)(n.code,{children:"System.DllNotFoundException: libSkiaSharp"}),") and you will need to rebuild again before the app will run."]}),"\n",(0,s.jsx)(n.p,{children:"Keep in mind, that WebAssembly in general as a technology is limited. .NET Multithreading is not supported by any browser and is only available starting .NET 8. Any normal app also has to comply with Browser sandboxing mechanism. And while Avalonia does its best to keep performance high, any WebAssembly GUI apps in some cases might be slow or with older browsers."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>a});var o=t(96540);const s={},r=o.createContext(s);function l(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);