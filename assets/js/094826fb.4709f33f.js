"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[8770],{37999:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"guides/data-binding/how-to-create-a-custom-data-binding-converter","title":"How to Create a Custom Data Binding Converter","description":"When one of the built-in data binding converters does not meet your conversion requirements, you can write a custom converter based on the IValueConverter interface. This guide will show you how.","source":"@site/docs/guides/data-binding/how-to-create-a-custom-data-binding-converter.md","sourceDirName":"guides/data-binding","slug":"/guides/data-binding/how-to-create-a-custom-data-binding-converter","permalink":"/docs/guides/data-binding/how-to-create-a-custom-data-binding-converter","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/guides/data-binding/how-to-create-a-custom-data-binding-converter.md","tags":[],"version":"current","lastUpdatedBy":"202420505","lastUpdatedAt":1755588461000,"frontMatter":{"id":"how-to-create-a-custom-data-binding-converter","title":"How to Create a Custom Data Binding Converter"},"sidebar":"documentationSidebar","previous":{"title":"How To Bind from Code","permalink":"/docs/guides/data-binding/binding-from-code"},"next":{"title":"How to Bind Multiple Properties","permalink":"/docs/guides/data-binding/how-to-bind-multiple-properties"}}');var a=t(74848),o=t(28453);const i={id:"how-to-create-a-custom-data-binding-converter",title:"How to Create a Custom Data Binding Converter"},s="How to Create a Custom Data Binding Converter",c={},l=[{value:"Example",id:"example",level:2},{value:"Target Property Type",id:"target-property-type",level:2},{value:"FuncValueConverter and FuncMultiConverter",id:"funcvalueconverter-and-funcmulticonverter",level:2},{value:"Example:",id:"example-1",level:3},{value:"More Information",id:"more-information",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"how-to-create-a-custom-data-binding-converter",children:"How to Create a Custom Data Binding Converter"})}),"\n",(0,a.jsxs)(n.p,{children:["When one of the built-in data binding converters does not meet your conversion requirements, you can write a custom converter based on the ",(0,a.jsx)(n.code,{children:"IValueConverter"})," interface. This guide will show you how."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["To review the ",(0,a.jsx)(n.em,{children:"Microsoft"})," documentation for the ",(0,a.jsx)(n.code,{children:"IValueConverter"})," interface, see ",(0,a.jsx)(n.a,{href:"https://docs.microsoft.com/en-gb/dotnet/api/system.windows.data.ivalueconverter?view=netframework-4.7.1",children:"here"}),"."]})}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["As the ",(0,a.jsx)(n.code,{children:"IValueConverter"})," interface was not available in .NET standard 2.0, Avalonia UI  contains a copy in the ",(0,a.jsx)(n.code,{children:"Avalonia.Data.Converters"})," namespace. You can see the API documentation about this interface, ",(0,a.jsx)(n.a,{href:"https://api-docs.avaloniaui.net/docs/T_Avalonia_Data_Converters_IValueConverter",children:"here"}),"."]})}),"\n",(0,a.jsxs)(n.p,{children:["You must reference a custom converter in some resources before it can be used. This can be at any level in your application. In this example, the custom converter ",(0,a.jsx)(n.code,{children:"myConverter"})," is referenced in the window resources:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        xmlns:local="clr-namespace:ExampleApp;assembly=ExampleApp">\n\n  <Window.Resources>\n    <local:MyConverter x:Key="myConverter"/>\n  </Window.Resources>\n\n  <TextBlock Text="{Binding Value, Converter={StaticResource myConverter}}"/>\n</Window>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"This example data binding converter can convert text to specific case from a parameter:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<TextBlock Text="{Binding TheContent, \n    Converter={StaticResource textCaseConverter},\n    ConverterParameter=lower}" />\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The above XAML assumes that the ",(0,a.jsx)(n.code,{children:"textCaseConverter"})," has been referenced in a resource."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",children:'public class TextCaseConverter : IValueConverter\n{\n    public static readonly TextCaseConverter Instance = new();\n\n    public object? Convert(object? value, Type targetType, object? parameter, \n                                                            CultureInfo culture)\n    {\n        if (value is string sourceText && parameter is string targetCase\n            && targetType.IsAssignableTo(typeof(string)))\n        {\n            switch (targetCase)\n            {\n                case "upper":\n                case "SQL":\n                    return sourceText.ToUpper();\n                case "lower":\n                    return sourceText.ToLower();\n                case "title": // Every First Letter Uppercase\n                    var txtinfo = new System.Globalization.CultureInfo("en-US",false)\n                                    .TextInfo;\n                    return txtinfo.ToTitleCase(sourceText);\n                default:\n                    // invalid option, return the exception below\n                    break;\n            }\n        }\n        // converter used for the wrong type\n        return new BindingNotification(new InvalidCastException(), \n                                                BindingErrorType.Error);\n    }\n\n    public object ConvertBack(object? value, Type targetType, \n                                object? parameter, CultureInfo culture)\n    {\n      throw new NotSupportedException();\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"target-property-type",children:"Target Property Type"}),"\n",(0,a.jsxs)(n.p,{children:["You may want to write a a custom converter that can switch the output type depending on what the target property requires. You can achieve this because the ",(0,a.jsx)(n.code,{children:"Convert"})," method receives a ",(0,a.jsx)(n.code,{children:"targetType"})," argument that you can test with the ",(0,a.jsx)(n.code,{children:"IsAssignableTo"})," function."]}),"\n",(0,a.jsxs)(n.p,{children:["In this example, the ",(0,a.jsx)(n.code,{children:"animalConverter"})," can find an image, or a text name for a bound ",(0,a.jsx)(n.code,{children:"Animal"})," class object:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",metastring:"title='XAML'",children:'<Image Width="42" \n       Source="{Binding Animal, Converter={StaticResource animalConverter}}"/>\n<TextBlock \n       Text="{Binding Animal, Converter={StaticResource animalConverter}}" />\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-csharp",metastring:"title='AnimalConverter.cs'",children:'public class AnimalConverter : IValueConverter\n{\n    public static readonly AnimalConverter Instance = new();\n\n    public object? Convert( object? value, Type targetType, \n                                    object? parameter, CultureInfo culture )\n    {\n        if (value is Animal animal)\n        {\n            if (targetType.IsAssignableTo(typeof(IImage)))\n            {\n                img = @"icons/generic-animal-placeholder.png"\n                switch (animal)\n                {\n                    case Dog d:\n                      img = d.IsGoodBoy ? @"icons/dog-happy.png" \n                                                      : @"icons/dog.png";\n                      break;\n                    case Cat:\n                      img = @"icons/cat.png";\n                      break;\n                    // etc. etc.\n                }\n                // see https://docs.avaloniaui.net/docs/guides/data-binding/how-to-create-a-custom-data-binding-converter\n                return BitmapAssetValueConverter.Instance\n                    .Convert(img, typeof(Bitmap), parameter, culture);\n            }\n            else if (targetType.IsAssignableTo(typeof(string)))\n            {\n                return !string.IsNullOrEmpty(animal.NickName) ? \n                    $"{animal.Name} \\"{animal.NickName}\\"" : animal.Name;\n            }\n        }\n        // converter used for the wrong type\n        return new BindingNotification(new InvalidCastException(), \n                                                    BindingErrorType.Error);\n        \n    }\n\n    public object ConvertBack( object? value, Type targetType, \n                                    object? parameter, CultureInfo culture )\n    {\n      throw new NotSupportedException();\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"funcvalueconverter-and-funcmulticonverter",children:"FuncValueConverter and FuncMultiConverter"}),"\n",(0,a.jsxs)(n.p,{children:["You can also implement a ",(0,a.jsx)(n.code,{children:"FuncValueConverter"})," if you don't need to convert back and also not the the ",(0,a.jsx)(n.code,{children:"ConverterParameter"}),". The FuncValueConverter has two generic parameters:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"TIn"}),": This parameter defines the expected input type. This can also be an array in case you want to use this converter in a MultiBinding."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"TOut"}),": This parameter defines the expected output type."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"example-1",children:"Example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cs",children:'public static class MyConverters \n{\n    /// <summary>\n    /// Gets a Converter that takes a number as input and converts it into a text representation\n    /// </summary>\n    public static FuncValueConverter<decimal?, string> MyConverter { get; } = \n        new FuncValueConverter<decimal?, string> (num => $"Your number is: \'{num}\'");\n    \n    /// <summary>\n    /// Gets a Converter that takes several numbers as input and converts it into a text representation\n    /// </summary>\n    public static FuncMultiValueConverter<decimal?, string> MyMultiConverter { get; } = \n        new FuncMultiValueConverter<decimal?, string> (num => $"Your numbers are: \'{string.Join(", ", num)}\'");\n}\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-xml",children:'<StackPanel>\n    \x3c!-- Input --\x3e\n    <NumericUpDown x:Name="Num1" Value="3" />\n    <NumericUpDown x:Name="Num2" Value="3" />\n    \x3c!-- Output --\x3e\n    <TextBlock Text="{Binding #Num1.Value, Converter={x:Static my:MyConverters.MyConverter}}" />\n    <TextBlock>\n        <TextBlock.Text>\n            <MultiBinding Converter="{x:Static my:MyConverters.MyMultiConverter}">\n                <Binding Path="#Num1.Value" />\n                <Binding Path="#Num2.Value" />\n            </MultiBinding>\n        </TextBlock.Text>\n    </TextBlock>\n</StackPanel>\n'})}),"\n",(0,a.jsx)(n.h2,{id:"more-information",children:"More Information"}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["For further guidance about how to bind images, see ",(0,a.jsx)(n.a,{href:"/docs/guides/data-binding/how-to-bind-image-files",children:"here"}),"."]})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var r=t(96540);const a={},o=r.createContext(a);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);