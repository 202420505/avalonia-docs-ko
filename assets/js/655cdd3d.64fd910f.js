"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[829],{35815:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"reference/built-in-data-binding-converters","title":"Built-in Data Binding Converters","description":"REFERENCE","source":"@site/docs/reference/built-in-data-binding-converters.md","sourceDirName":"reference","slug":"/reference/built-in-data-binding-converters","permalink":"/avalonia-docs-ko/docs/reference/built-in-data-binding-converters","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/reference/built-in-data-binding-converters.md","tags":[],"version":"current","lastUpdatedBy":"Q","lastUpdatedAt":1755671977000,"frontMatter":{"description":"REFERENCE"},"sidebar":"documentationSidebar","previous":{"title":"Animation Settings","permalink":"/avalonia-docs-ko/docs/reference/animation-settings"},"next":{"title":"Controls Reference","permalink":"/avalonia-docs-ko/docs/reference/controls/"}}');var r=t(74848),o=t(28453);const s={description:"REFERENCE"},l="Built-in Data Binding Converters",a={},d=[{value:"Negation Operator Examples",id:"negation-operator-examples",level:2},{value:"Other Conversion Examples",id:"other-conversion-examples",level:2},{value:"More Information",id:"more-information",level:2}];function c(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"built-in-data-binding-converters",children:"Built-in Data Binding Converters"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Avalonia UI"})," includes a number of built-in data binding converters for common scenarios:"]}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Converter"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Negation Operator"}),(0,r.jsx)(n.td,{children:"The ! operator can be placed in front of the data binding path to return the inversion of a Boolean value. See also the note below."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StringConverters.IsNullOrEmpty"})}),(0,r.jsxs)(n.td,{children:["Returns ",(0,r.jsx)(n.code,{children:"true"})," if the input string is null or empty"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"StringConverters.IsNotNullOrEmpty"})}),(0,r.jsxs)(n.td,{children:["Returns ",(0,r.jsx)(n.code,{children:"false"})," if the input string is null or empty"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ObjectConverters.IsNull"})}),(0,r.jsxs)(n.td,{children:["Returns ",(0,r.jsx)(n.code,{children:"true"})," if the input is null"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ObjectConverters.IsNotNull"})}),(0,r.jsxs)(n.td,{children:["Returns ",(0,r.jsx)(n.code,{children:"false"})," if the input is null"]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"BoolConverters.And"})}),(0,r.jsxs)(n.td,{children:["A multi-value converter that returns ",(0,r.jsx)(n.code,{children:"true"})," if all inputs are true."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"BoolConverters.Or"})}),(0,r.jsxs)(n.td,{children:["A multi-value converter that returns ",(0,r.jsx)(n.code,{children:"true"})," if any input is true."]})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"negation-operator-examples",children:"Negation Operator Examples"}),"\n",(0,r.jsxs)(n.p,{children:["This example shows the ",(0,r.jsx)(n.code,{children:"TextBlock"})," when the bound value is false:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<StackPanel>\n  <TextBox Name="input" IsEnabled="{Binding AllowInput}"/>\n  <TextBlock IsVisible="{Binding !AllowInput}">Input is not allowed</TextBlock>\n</StackPanel>\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Negation also works when you bind to a non-Boolean value. This works because the bound value is first converted to a Boolean (using the function ",(0,r.jsx)(n.code,{children:"Convert.ToBoolean"})," ) and then the result is negated."]}),"\n",(0,r.jsxs)(n.p,{children:["For example, as the integer zero is converted to false (by the function ",(0,r.jsx)(n.code,{children:"Convert.ToBoolean"}),") and all other integer values are converted to true, you can use the negation operator to show a message when a collection is empty, like this:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<Panel>\n  <ListBox ItemsSource="{Binding Items}"/>\n  <TextBlock IsVisible="{Binding !Items.Count}">No results found</TextBlock>\n</Panel>\n'})}),"\n",(0,r.jsx)(n.p,{children:"You can also use the negation operator twice. For example, where you want to perform the conversion from integer to Boolean, and then negate that value."}),"\n",(0,r.jsx)(n.p,{children:"You can use this to hide a control when a collection is empty (count is zero), like this:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<Panel>\n  <ListBox ItemsSource="{Binding Items}" IsVisible="{Binding !!Items.Count}"/>\n</Panel>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"other-conversion-examples",children:"Other Conversion Examples"}),"\n",(0,r.jsx)(n.p,{children:"This example binding will hide the text block if its bound text is null or empty:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<TextBlock Text="{Binding MyText}"\n           IsVisible="{Binding MyText, \n                       Converter={x:Static StringConverters.IsNotNullOrEmpty}}"/>\n'})}),"\n",(0,r.jsx)(n.p,{children:"And this example will hide the content control if the bound object is null or empty:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-xml",children:'<ContentControl Content="{Binding MyContent}"\n                IsVisible="{Binding MyContent, \n                            Converter={x:Static ObjectConverters.IsNotNull}}"/>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"more-information",children:"More Information"}),"\n",(0,r.jsx)(n.admonition,{type:"info",children:(0,r.jsxs)(n.p,{children:["You can follow the Avalonia UI value converter sample, ",(0,r.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/MVVM/ValueConversionSample",children:"here"}),"."]})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>l});var i=t(96540);const r={},o=i.createContext(r);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);