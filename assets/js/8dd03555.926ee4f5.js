"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[7549],{34845:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>l,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"reference/gestures/pinchgesturerecognizer","title":"PinchGestureRecognizer","description":"REFERENCE - Gestures","source":"@site/docs/reference/gestures/pinchgesturerecognizer.md","sourceDirName":"reference/gestures","slug":"/reference/gestures/pinchgesturerecognizer","permalink":"/avalonia-docs-ko/docs/reference/gestures/pinchgesturerecognizer","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/reference/gestures/pinchgesturerecognizer.md","tags":[],"version":"current","lastUpdatedBy":"202420505","lastUpdatedAt":1755602100000,"frontMatter":{"description":"REFERENCE - Gestures"},"sidebar":"documentationSidebar","previous":{"title":"Gestures","permalink":"/avalonia-docs-ko/docs/reference/gestures/"},"next":{"title":"PullGestureRecognizer","permalink":"/avalonia-docs-ko/docs/reference/gestures/pullgesturerecognizer"}}');var s=r(74848),i=r(28453);const c={description:"REFERENCE - Gestures"},o="PinchGestureRecognizer",a={},d=[{value:"Using a PinchGestureRecognizer",id:"using-a-pinchgesturerecognizer",level:2},{value:"Binding Events",id:"binding-events",level:2},{value:"More Information",id:"more-information",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"pinchgesturerecognizer",children:"PinchGestureRecognizer"})}),"\n",(0,s.jsx)(n.p,{children:"A gesture recognizer that tracks a pinch gesture. A pinch gesture occurs when two pointer contacts are brought towards each other, or away from each other. This is useful in controls that implements a pinch to zoom interaction."}),"\n",(0,s.jsx)(n.h2,{id:"using-a-pinchgesturerecognizer",children:"Using a PinchGestureRecognizer"}),"\n",(0,s.jsxs)(n.p,{children:["A PinchGestureRecognizer can be attached to a control using the control's ",(0,s.jsx)(n.code,{children:"GestureRecognizers"})," property."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-xml",children:'<Image Stretch="UniformToFill"\n        Margin="5"\n        Name="image"\n        Source="/image.jpg">\n  <Image.GestureRecognizers>\n    <PinchGestureRecognizer/>\n  </Image.GestureRecognizers>\n</Image>\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"title='C#'",children:"image.GestureRecognizers.Add(new PinchGestureRecognizer());\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The PinchGestureRecognizer raises a ",(0,s.jsx)(n.code,{children:"Gestures.PinchEvent"})," when it detects the start of a pull gesture. When the pull ends, from the pointer being released or another gesture start, it raises a ",(0,s.jsx)(n.code,{children:"Gestures.PinchEndedEvent"}),".\nThe ",(0,s.jsx)(n.code,{children:"Scale"})," property in the args passed to the ",(0,s.jsx)(n.code,{children:"Gestures.PinchEvent"})," event handler contains the relative size of the pinch since it started."]}),"\n",(0,s.jsx)(n.h2,{id:"binding-events",children:"Binding Events"}),"\n",(0,s.jsx)(n.p,{children:"After the PinchGestureRecognizer has been added to your control, you need to bind them in your code behind either through an inline handler or to an event function:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"title='C#'",children:"image.AddHandler(Gestures.PinchEvent, (s, e) => { });\nimage.AddHandler(Gestures.PinchEndedEvent, (s, e) => { });\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"title='C#'",children:"image.AddHandler(Gestures.PinchEvent, Image_PinchGesture);\nimage.AddHandler(Gestures.PinchEndedEvent, Image_PinchGestureEnded);\n...\nprivate void Image_PinchGesture(object? sender, PinchGestureEventArgs e) { }\nprivate void Image_PinchGestureEnded(object? sender, PinchGestureEndedEventArgs e) { }\n"})}),"\n",(0,s.jsx)(n.p,{children:"If your event handles the gesture completely, you can mark the event as handled by setting:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"title='C#'",children:"e.Handled = true;\n"})}),"\n",(0,s.jsx)(n.h2,{id:"more-information",children:"More Information"}),"\n",(0,s.jsxs)(n.admonition,{type:"info",children:[(0,s.jsxs)(n.p,{children:["View the source code on ",(0,s.jsx)(n.em,{children:"GitHub"})]}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Base/Input/GestureRecognizers/PinchGestureRecognizer.cs",children:(0,s.jsx)(n.code,{children:"PinchGestureRecognizer.cs"})})}),(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Base/Input/PinchEventArgs.cs",children:(0,s.jsx)(n.code,{children:"PinchEventArgs.cs"})})})]})]})}function l(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>o});var t=r(96540);const s={},i=t.createContext(s);function c(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);