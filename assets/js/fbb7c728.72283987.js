"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[762],{98593:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>m,contentTitle:()=>p,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"tutorials/samples","title":"Samples","description":"Model-View-ViewModel (MVVM)","source":"@site/docs/tutorials/samples.md","sourceDirName":"tutorials","slug":"/tutorials/samples","permalink":"/avalonia-docs-ko/docs/tutorials/samples","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/tutorials/samples.md","tags":[],"version":"current","lastUpdatedBy":"Q","lastUpdatedAt":1755590087000,"frontMatter":{"id":"samples","title":"Samples"},"sidebar":"documentationSidebar","previous":{"title":"Samples & Tutorials","permalink":"/avalonia-docs-ko/docs/tutorials/"},"next":{"title":"Creating a GroupBox","permalink":"/avalonia-docs-ko/docs/tutorials/groupbox"}}');var o=t(74848),s=t(28453);t(96540);const l=a=>{let{title:e,description:t,tags:i=[],url:s}=a;return(0,o.jsxs)("div",{className:"bg-white border-gray-200 border-solid  rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-200",children:[(0,o.jsx)("h3",{className:"text-lg font-medium mb-2",children:(0,o.jsx)("a",{href:s,className:"text-blue-600 hover:text-blue-800 hover:underline",children:e})}),(0,o.jsx)("p",{className:"text-gray-600 mb-4",children:t}),(0,o.jsx)("div",{className:"flex flex-wrap gap-2",children:i.map(((a,e)=>(0,o.jsx)("span",{className:"px-3 py-1 bg-slate-200 text-gray-700 rounded-md text-sm",children:a},e)))})]})},n=a=>{let{samples:e}=a;return(0,o.jsx)("div",{className:"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 p-6",children:e.map(((a,e)=>(0,o.jsx)(l,{title:a.title,description:a.description,tags:a.tags,url:a.url},e)))})},r={id:"samples",title:"Samples"},p=void 0,m={},c=[{value:"Model-View-ViewModel (MVVM)",id:"model-view-viewmodel-mvvm",level:2},{value:"DataTemplates",id:"datatemplates",level:2},{value:"Controls, Styles &amp; Drawing",id:"controls-styles--drawing",level:2},{value:"Custom Controls",id:"custom-controls",level:2},{value:"Miscellaneous",id:"miscellaneous",level:2},{value:"Automated UI Testing",id:"automated-ui-testing",level:2}];function u(a){const e={h2:"h2",...(0,s.R)(),...a.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.h2,{id:"model-view-viewmodel-mvvm",children:"Model-View-ViewModel (MVVM)"}),"\n",(0,o.jsx)(n,{samples:[{title:"Basic MVVM",description:"This sample will show you how you can use the MVVM-pattern to receive and process text input by the user.",tags:["XAML","C#","MVVM"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/MVVM/BasicMvvmSample"},{title:"Binding & Converters",description:"This sample will show you how you can use use bindings and converters to convert a Date to a string value (calculating the age of a person).",tags:["XAML","C#","MVVM","Converter"],url:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/BindingsAndConverters"},{title:"Commands",description:"This sample will show you how you can use Commands to invoke methods in your ViewModel from your user interface.",tags:["XAML","C#","MVVM"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/MVVM/CommandSample"},{title:"ValueConverter",description:"In this sample you will learn how you can use a Converter inside your Binding in order to calculate a new value for the View.",tags:["XAML","C#","MVVM","Converter"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/MVVM/ValueConversionSample"},{title:"Data Validation",description:"This sample you will learn how to validate properties and display an error message to the user, if the entered values are invalid.",tags:["XAML","C#","MVVM"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/MVVM/ValidationSample"},{title:"Dialogs",description:"This sample will show you how to use Reactive UI Interactions to show [dialogs] in your MVVM application",tags:["XAML","C#","MVVM","RxUI"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/ViewInteraction/MvvmDialogSample"},{title:"Dialog Manager",description:"This sample will show you how to write a service (we will call it dialog manager) that will help you to show dialogs in your MVVM application",tags:["XAML","C#","MVVM"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/ViewInteraction/DialogManagerSample"}]}),"\n",(0,o.jsx)(e.h2,{id:"datatemplates",children:"DataTemplates"}),"\n",(0,o.jsx)(n,{samples:[{title:"Basic DataTemplate",description:"This sample will show you how you can use DataTemplates to control how your data is displayed.",tags:["XAML","C#","DataTemplate"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/DataTemplates/BasicDataTemplateSample"},{title:"FuncDataTemplate",description:"This sample will show you how to use a FuncDataTemplate to create an advanced DataTemplate in code.",tags:["XAML","C#","DataTemplate"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/DataTemplates/FuncDataTemplateSample"},{title:"IDataTemplate",description:"This sample will show you how to implement IDataTemplate in your own class to have full control over your DataTemplates.",tags:["XAML","C#","DataTemplate"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/DataTemplates/IDataTemplateSample"}]}),"\n",(0,o.jsx)(e.h2,{id:"controls-styles--drawing",children:"Controls, Styles & Drawing"}),"\n",(0,o.jsx)(n,{samples:[{title:"Customized Button",description:"This sample will show you how to customize the style of a button by creating reusable styles.",tags:["XAML","C#","Style"],url:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/ButtonCustomize"},{title:"Making Lists",description:"This sample will show you how to create lists of data using Bindings and a ListBox control",tags:["XAML","C#","Lists"],url:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/MakingLists"},{title:"Native Menus",description:"This sample will show you how to use native menus on macOS and Linux.",tags:["XAML","C#","Menus"],url:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/NativeMenuOps"},{title:"Splash Screen",description:"This sample will show you how to create a custom Splash Screen that loads before your MainWindow",tags:["XAML","C#","Splash"],url:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/SplashScreen"},{title:"Rect Painter",description:"This sample will show you how to create a custom rendered control which interacts with the mouse, to form a simple paint application.",tags:["XAML","C#","Drawing"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/Drawing/RectPainter"},{title:"Image Loading",description:"This sample will show you how to load images via XAML, Bindings and from the internet.",tags:["XAML","C#","Images"],url:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/LoadingImages"},{title:"Using Google Fonts",description:"This sample will show you how to use Google fonts within your application",tags:["XAML","C#","Font"],url:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/GoogleFonts"},{title:"BattleCity",description:"The purpose of the sample is to demonstrate that how to create a 2D game in Avalonia without writing any rendering code.",tags:["XAML","C#","Drawing"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/Drawing/BattleCity"}]}),"\n",(0,o.jsx)(e.h2,{id:"custom-controls",children:"Custom Controls"}),"\n",(0,o.jsx)(n,{samples:[{title:"Custom Rating Control ",description:"This sample will show you how to create a custom control. The goal is to create a rating control, where the user can vote via clicking one of several stars.",tags:["XAML","C#","Custom Controls"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/CustomControls/RatingControlSample"},{title:"Custom Snowflakes Control",description:"This sample will show you how to create a custom control that overrides OnRender in order to have advanced render capabilities.",tags:["XAML","C#","Custom Controls"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/CustomControls/SnowflakesControlSample"}]}),"\n",(0,o.jsx)(e.h2,{id:"miscellaneous",children:"Miscellaneous"}),"\n",(0,o.jsx)(n,{samples:[{title:"Clipboard Operations",description:"This sample demonstrates how to interact with the devices clipboard and copy and paste text.",tags:["XAML","C#","Clipboard"],url:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/ClipboardOps"},{title:"Drag and Drop Operations",description:"This sample demonstrates how to implement dragging and dropping within your Avalonia application.",tags:["XAML","C#","Drag-and-Drop"],url:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/DragDropOps"},{title:"Native File Dialogs",description:"This sample demonstrates how to use the native Save As and Open File dialogs.",tags:["XAML","C#","Dialogs"],url:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/FileOps"},{title:"Basic Localization",description:"This sample demonstrates how to localize your Avalonia application.",tags:["XAML","C#","Localization"],url:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/Localization"},{title:"Basic Inversion of Control",description:"This sample demonstrates how to use the native Save As and Open File dialogs with IoC.",tags:["XAML","C#","Dialogs","IoC"],url:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/IoCFileOps"},{title:"Basic ViewLocator",description:"This sample will show you how to use a ViewLocator in order to change the contents of your UI.",tags:["XAML","C#","Navigation"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/Routing/BasicViewLocatorSample"},{title:"Native AOT",description:"This sample will show you how to setup your application for building with Native AOT",tags:["XAML","C#","Native AOT"],url:"https://github.com/AvaloniaUI/AvaloniaUI.QuickGuides/tree/main/NativeAot"}]}),"\n",(0,o.jsx)(e.h2,{id:"automated-ui-testing",children:"Automated UI Testing"}),"\n",(0,o.jsx)(n,{samples:[{title:"Headless Testing with XUnit",description:"This sample will show you how the headless platform in Avalonia provides the capability to run Avalonia applications without a visible graphical user interface",tags:["XAML","C#","Testing","XUnit"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/Testing/TestableApp.Headless.XUnit"},{title:"Headless Testing with NUnit",description:"This sample will show you how the headless platform in Avalonia provides the capability to run Avalonia applications without a visible graphical user interface",tags:["XAML","C#","Testing","NUnit"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/Testing/TestableApp.Headless.NUnit"},{title:"Testing with Appium",description:"Automated tests for UI interactions, such as button clicks, text input, and screen navigation.",tags:["XAML","C#","Testing","Appium"],url:"https://github.com/AvaloniaUI/Avalonia.Samples/tree/main/src/Avalonia.Samples/Testing/TestableApp.Appium"}]})]})}function d(a={}){const{wrapper:e}={...(0,s.R)(),...a.components};return e?(0,o.jsx)(e,{...a,children:(0,o.jsx)(u,{...a})}):u(a)}},28453:(a,e,t)=>{t.d(e,{R:()=>l,x:()=>n});var i=t(96540);const o={},s=i.createContext(o);function l(a){const e=i.useContext(s);return i.useMemo((function(){return"function"==typeof a?a(e):{...e,...a}}),[e,a])}function n(a){let e;return e=a.disableParentContext?"function"==typeof a.components?a.components(o):a.components||o:l(a.components),i.createElement(s.Provider,{value:e},a.children)}}}]);