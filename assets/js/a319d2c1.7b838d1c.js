"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[6399],{72211:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>w,frontMatter:()=>d,metadata:()=>s,toc:()=>h});const s=JSON.parse('{"id":"tutorials/music-store-app/opening-a-dialog","title":"Open a Dialog","description":"TUTORIALS - Music Store App","source":"@site/docs/tutorials/music-store-app/opening-a-dialog.mdx","sourceDirName":"tutorials/music-store-app","slug":"/tutorials/music-store-app/opening-a-dialog","permalink":"/avalonia-docs-ko/docs/tutorials/music-store-app/opening-a-dialog","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/tutorials/music-store-app/opening-a-dialog.mdx","tags":[],"version":"current","lastUpdatedBy":"Q","lastUpdatedAt":1755590087000,"frontMatter":{"description":"TUTORIALS - Music Store App"},"sidebar":"documentationSidebar","previous":{"title":"Button Command","permalink":"/avalonia-docs-ko/docs/tutorials/music-store-app/button-command"},"next":{"title":"Add Dialog Content","permalink":"/avalonia-docs-ko/docs/tutorials/music-store-app/add-content-to-dialog"}}');var l=i(74848),o=i(28453);const t=i.p+"assets/images/add-window-c6bcadbc5c6f2ef76e3c36240fc22958.png",a=i.p+"assets/images/dialog-opened-80a72e3d908a1ce320cc2950ae60792e.png",d={description:"TUTORIALS - Music Store App"},r="Open a Dialog",c={},h=[{value:"Add a New Dialog Window",id:"add-a-new-dialog-window",level:2},{value:"Dialog Window Styling",id:"dialog-window-styling",level:2},{value:"Dialog Input and Output",id:"dialog-input-and-output",level:2},{value:"Show Dialog",id:"show-dialog",level:2},{value:"Define the PurchaseAlbumMessage",id:"define-the-purchasealbummessage",level:3},{value:"Register the Message Handler in  MainWindow",id:"register-the-message-handler-in--mainwindow",level:3},{value:"Send the Message from the ViewModel",id:"send-the-message-from-the-viewmodel",level:3},{value:"Dialog Position and Size",id:"dialog-position-and-size",level:2}];function u(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"open-a-dialog",children:"Open a Dialog"})}),"\n",(0,l.jsx)(n.p,{children:"On this page you will learn how to open dialog window in your app and exchange data between windows using Mvvm.Messaging. The dialog will be used to search for and select an album to add to a list in the main window."}),"\n",(0,l.jsx)(n.p,{children:"Two messages will be used in your app:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"PurchaseAlbumMessage"})," \u2014 sent by the main view model to request the dialog window be shown and await a result."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"MusicStoreClosedMessage"})," \u2014 sent by the dialog's view model when the user selects an album, to return the result and close the dialog."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Below is a diagram showing the message flow between the components that you are going to implement in the next steps:"}),"\n",(0,l.jsx)(n.mermaid,{value:"graph TD;\n    A[MainWindowViewModel] --\x3e|Send PurchaseAlbumMessage| B(MainWindow)\n    B --\x3e|Show MusicStoreWindow<br>await AlbumViewModel| C[MusicStoreWindow]\n    C --\x3e|BuyMusic| D[MusicStoreViewModel]\n    D --\x3e|Send MusicStoreClosedMessage<br>with SelectedAlbum| C\n    C --\x3e|Close dialog<br>return SelectedAlbum| B\n    B --\x3e|Reply with AlbumViewModel| A"}),"\n",(0,l.jsx)(n.h2,{id:"add-a-new-dialog-window",children:"Add a New Dialog Window"}),"\n",(0,l.jsxs)(n.p,{children:["There is nothing special about a window view file that makes it into a dialog; that is up to the way in which the window is controlled by the app. You will use Avalonia UI features and ",(0,l.jsx)(n.em,{children:"CommunityToolkit.Mvvm"})," to manage this. So the first step is to create a new window for the app."]}),"\n",(0,l.jsx)(n.p,{children:"To create a new window, follow this procedure:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Stop the app if it is still running."}),"\n",(0,l.jsxs)(n.li,{children:["In the solution explorer, right-click the ",(0,l.jsx)(n.strong,{children:"/Views"})," folder and then click ",(0,l.jsx)(n.strong,{children:"Add"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Click ",(0,l.jsx)(n.strong,{children:"Avalonia Window"}),"."]}),"\n",(0,l.jsx)(n.li,{children:"When prompted for the name, type 'MusicStoreWindow'"}),"\n",(0,l.jsx)(n.li,{children:"Press enter."}),"\n"]}),"\n",(0,l.jsx)("p",{children:(0,l.jsx)("img",{className:"image-medium-zoom",src:t,alt:""})}),"\n",(0,l.jsx)(n.h2,{id:"dialog-window-styling",children:"Dialog Window Styling"}),"\n",(0,l.jsx)(n.p,{children:"To style the new dialog window so that it matches the main window, follow this procedure:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Locate and open the ",(0,l.jsx)(n.strong,{children:"MusicStoreWindow.axaml"})," file."]}),"\n",(0,l.jsx)(n.li,{children:"Change this code as follows to add the acrylic blur background, extended into the title bar (as before) as shown:"}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<Window xmlns="https://github.com/avaloniaui"\n        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"\n        x:Class="Avalonia.MusicStore.Views.MusicStoreWindow"\n        Title="MusicStoreWindow"\n        TransparencyLevelHint="AcrylicBlur"\n        ExtendClientAreaToDecorationsHint="True">\n    <Panel>\n        <ExperimentalAcrylicBorder IsHitTestVisible="False">\n            <ExperimentalAcrylicBorder.Material>\n                <ExperimentalAcrylicMaterial\n                    BackgroundSource="Digger"\n                    TintColor="Black"\n                    TintOpacity="1"\n                    MaterialOpacity="0.65" />\n            </ExperimentalAcrylicBorder.Material>\n        </ExperimentalAcrylicBorder>\n\n        <Panel Margin="40">\n\n        </Panel>\n    </Panel>\n</Window>\n'})}),"\n",(0,l.jsx)(n.h2,{id:"dialog-input-and-output",children:"Dialog Input and Output"}),"\n",(0,l.jsx)(n.p,{children:"The application logic for the dialog will be controlled by its own view model. This will be created and linked to the dialog window view whenever the dialog is to be shown."}),"\n",(0,l.jsx)(n.p,{children:"Similarly, the result of the users interaction with the dialog will eventually have to be passed back to the application logic for the main window for processing."}),"\n",(0,l.jsx)(n.p,{children:"At this stage you will create two empty view model classes to act as placeholders for the dialog view model, and the dialog return (selected album) object. To create these view models, follow this procedure:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["In the solution explorer, right-click the ",(0,l.jsx)(n.strong,{children:"/ViewModels"})," folder and then click ",(0,l.jsx)(n.strong,{children:"Add"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Click ",(0,l.jsx)(n.strong,{children:"Class"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Name the class 'MusicStoreViewModel' and click ",(0,l.jsx)(n.strong,{children:"Add"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Right-click again the ",(0,l.jsx)(n.strong,{children:"/ViewModels"})," folder and then click ",(0,l.jsx)(n.strong,{children:"Add"})," a second time."]}),"\n",(0,l.jsxs)(n.li,{children:["Click ",(0,l.jsx)(n.strong,{children:"Class"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Name the class 'AlbumViewModel' and click ",(0,l.jsx)(n.strong,{children:"Add"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"show-dialog",children:"Show Dialog"}),"\n",(0,l.jsxs)(n.p,{children:["Now that you have a new window ",(0,l.jsx)(n.code,{children:"MusicStoreWindow"})," and the corresponding view models ",(0,l.jsx)(n.code,{children:"MusicStoreViewModel"})," and ",(0,l.jsx)(n.code,{children:"AlbumViewModel"}),".\nYou are going to complete the logic so that:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"The main window view model sends a message requesting the dialog to be shown."}),"\n",(0,l.jsx)(n.li,{children:"The main window view receives that message, opens the dialog, and returns the result."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Below is how this works step-by-step using the CommunityToolkit.Mvvm messaging API."}),"\n",(0,l.jsx)(n.h3,{id:"define-the-purchasealbummessage",children:"Define the PurchaseAlbumMessage"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["In the project root directory create new folder ",(0,l.jsx)(n.strong,{children:"/Messages"})]}),"\n",(0,l.jsxs)(n.li,{children:["In the newly created ",(0,l.jsx)(n.strong,{children:"/Messages"})," folder add a class ",(0,l.jsx)(n.strong,{children:"PurchaseAlbumMessage"}),"."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["First, you are going to define a message class called ",(0,l.jsx)(n.code,{children:"PurchaseAlbumMessage"})," that carries an ",(0,l.jsx)(n.code,{children:"AlbumViewModel"})," response.\nThis message will be sent by the view model when it needs to show the dialog."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Open ",(0,l.jsx)(n.strong,{children:"PurchaseAlbumMessage.cs"})," and add the following code there:"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:"using Avalonia.MusicStore.ViewModels;\nusing CommunityToolkit.Mvvm.Messaging.Messages;\n\nnamespace Avalonia.MusicStore.Messages;\n\npublic class PurchaseAlbumMessage : AsyncRequestMessage<AlbumViewModel?>;\n\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.em,{children:(0,l.jsx)(n.code,{children:"AsyncRequestMessage<T>"})})," lets you send a request and await a reply of type T (in our case, AlbumViewModel?)."]}),"\n",(0,l.jsx)(n.h3,{id:"register-the-message-handler-in--mainwindow",children:"Register the Message Handler in  MainWindow"}),"\n",(0,l.jsxs)(n.p,{children:["In ",(0,l.jsx)(n.em,{children:"MainWindow.axaml.cs"})," register a handler for ",(0,l.jsx)(n.code,{children:"PurchaseAlbumMessage"}),". This handler runs whenever the view model sends that message. Its job is to:"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Create the dialog window."}),"\n",(0,l.jsxs)(n.li,{children:["Assign ",(0,l.jsx)(n.code,{children:"MusicStoreViewModel"})," as its DataContext."]}),"\n",(0,l.jsxs)(n.li,{children:["Call ",(0,l.jsx)(n.code,{children:"ShowDialog<AlbumViewModel?>"})," and pass the result back via m.Reply(...)."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Open ",(0,l.jsx)(n.em,{children:"MainWindow.axaml.cs"})," and add the following code into MainWindow constructor:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:"        public MainWindow()\n        {\n            InitializeComponent();\n\n            if (Design.IsDesignMode)\n                return;\n            \n            // Whenever 'Send(new PurchaseAlbumMessage())' is called, invoke this callback on the MainWindow instance:\n            WeakReferenceMessenger.Default.Register<MainWindow, PurchaseAlbumMessage>(this, static (w, m) =>\n            {\n                // Create an instance of MusicStoreWindow and set MusicStoreViewModel as its DataContext.\n                var dialog = new MusicStoreWindow\n                {\n                    DataContext = new MusicStoreViewModel()\n                };\n                // Show dialog window and reply with returned AlbumViewModel or null when the dialog is closed.\n                m.Reply(dialog.ShowDialog<AlbumViewModel?>(w));\n            });\n        }\n"})}),"\n",(0,l.jsx)(n.h3,{id:"send-the-message-from-the-viewmodel",children:"Send the Message from the ViewModel"}),"\n",(0,l.jsxs)(n.p,{children:["Now, update the ",(0,l.jsx)(n.code,{children:"AddAlbumAsync()"})," method inside ",(0,l.jsx)(n.code,{children:"MainWindowViewModel"})," to send ",(0,l.jsx)(n.code,{children:"PurchaseAlbumMessage"})," when the user clicks on the store button."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Open ",(0,l.jsx)(n.strong,{children:"MainWindowViewModel.cs"})]}),"\n",(0,l.jsxs)(n.li,{children:["Locate the ",(0,l.jsx)(n.code,{children:"AddAlbumAsync()"})," method that we added in the previous steps."]}),"\n",(0,l.jsxs)(n.li,{children:["Edit ",(0,l.jsx)(n.code,{children:"AddAlbumAsync()"})," as shown:"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-csharp",children:"[RelayCommand]\nprivate async Task AddAlbumAsync()\n{\n    // Send the message to the previously registered handler and await the selected album\n    var album = await WeakReferenceMessenger.Default.Send(new PurchaseAlbumMessage());\n}\n"})}),"\n",(0,l.jsx)(n.p,{children:"Now:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Click ",(0,l.jsx)(n.strong,{children:"Debug"})," to compile and run the project."]}),"\n",(0,l.jsx)(n.li,{children:"Click the icon button."}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"It all works - but the dialog window opens at the same size as the main window, and offset from it."}),"\n",(0,l.jsx)(n.h2,{id:"dialog-position-and-size",children:"Dialog Position and Size"}),"\n",(0,l.jsx)(n.p,{children:"In the last step here, you will make the dialog smaller that the main window, and open centered on it. You will also make the main window open in the center of the user's screen."}),"\n",(0,l.jsx)(n.p,{children:"Follow this procedure:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Stop the app if it is still running."}),"\n",(0,l.jsxs)(n.li,{children:["Locate and open the ",(0,l.jsx)(n.strong,{children:"MainWindow.axaml"})," file."]}),"\n",(0,l.jsxs)(n.li,{children:["Add an attribute to the ",(0,l.jsx)(n.code,{children:"<Window>"})," element to set the start-up position:"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<Window ...\n    WindowStartupLocation="CenterScreen">\n'})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Locate and open the ",(0,l.jsx)(n.strong,{children:"MusicStoreWindow.axaml"})," file."]}),"\n",(0,l.jsx)(n.li,{children:"Add attributes for the width and height of the dialog, set at 1000 and 550 respectively."}),"\n",(0,l.jsxs)(n.li,{children:["Add the start-up position attribute set to ",(0,l.jsx)(n.code,{children:"CenterOwner"}),", as shown:"]}),"\n"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-xml",children:'<Window ...\n    Width="1000" Height="550"\n    WindowStartupLocation="CenterOwner">\n'})}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["Click ",(0,l.jsx)(n.strong,{children:"Debug"})," to compile and run the project."]}),"\n",(0,l.jsx)(n.li,{children:"Click the icon button."}),"\n"]}),"\n",(0,l.jsx)("p",{children:(0,l.jsx)("img",{className:"image-medium-zoom",src:a,alt:""})}),"\n",(0,l.jsx)(n.p,{children:"The dialog window is now opened centered inside the main window."}),"\n",(0,l.jsx)(n.p,{children:"On the next page, you will learn how to add some content to the dialog window to represent a search for albums, and present the results."})]})}function w(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(u,{...e})}):u(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var s=i(96540);const l={},o=s.createContext(l);function t(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);