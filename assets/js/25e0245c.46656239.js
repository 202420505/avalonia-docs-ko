"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[7569],{51937:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"concepts/markupextensions","title":"Markup Extensions","description":"A MarkupExtension allows code-based customization of setter logic to a target property in a convenient, reusable","source":"@site/docs/concepts/markupextensions.md","sourceDirName":"concepts","slug":"/concepts/markupextensions","permalink":"/avalonia-docs-ko/docs/concepts/markupextensions","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/concepts/markupextensions.md","tags":[],"version":"current","lastUpdatedBy":"Q","lastUpdatedAt":1755672260000,"frontMatter":{"id":"markupextensions","title":"Markup Extensions"},"sidebar":"documentationSidebar","previous":{"title":"Avalonia UI and MVVM","permalink":"/avalonia-docs-ko/docs/concepts/the-mvvm-pattern/avalonia-ui-and-mvvm"},"next":{"title":"ReactiveUI","permalink":"/avalonia-docs-ko/docs/concepts/reactiveui/"}}');var t=r(74848),s=r(28453);const o={id:"markupextensions",title:"Markup Extensions"},a=void 0,d={},l=[{value:"Compiler intrinsics",id:"compiler-intrinsics",level:2},{value:"Creating MarkupExtensions",id:"creating-markupextensions",level:2},{value:"Receiving Literal Parameters",id:"receiving-literal-parameters",level:3},{value:"Receiving Parameters From Bindings",id:"receiving-parameters-from-bindings",level:3},{value:"Returning Parameters",id:"returning-parameters",level:3},{value:"MarkupExtension Property Attributes",id:"markupextension-property-attributes",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["A ",(0,t.jsx)(n.code,{children:"MarkupExtension"})," allows code-based customization of setter logic to a target property in a convenient, reusable\nsyntax within XAML. Curly braces are used to differentiate the usage from plain text."]}),"\n",(0,t.jsx)(n.p,{children:"Avalonia provides the following:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"MarkupExtension"}),(0,t.jsx)(n.th,{children:"Assigns to Property"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/docs/guides/styles-and-resources/resources#static-resource",children:"StaticResource"})}),(0,t.jsx)(n.td,{children:"An existing keyed resource and does not update on changes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/docs/guides/styles-and-resources/resources#using-resources",children:"DynamicResource"})}),(0,t.jsx)(n.td,{children:"Deferred loading of a keyed resource that will update on changes"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:"Binding"}),(0,t.jsx)(n.td,{children:"Based on the default binding preference: Compiled or Reflection"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/docs/basics/data/data-binding/compiled-bindings#compiledbinding-markup",children:"CompiledBinding"})}),(0,t.jsx)(n.td,{children:"Based on a compiled binding"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/docs/basics/data/data-binding/compiled-bindings#reflectionbinding-markup",children:"ReflectionBinding"})}),(0,t.jsx)(n.td,{children:"Based on a reflection binding"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/docs/guides/custom-controls/how-to-create-templated-controls#data-binding",children:"TemplateBinding"})}),(0,t.jsxs)(n.td,{children:["Based on a simplified binding used only within a ",(0,t.jsx)(n.code,{children:"ControlTemplate"})]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/docs/guides/platforms/platform-specific-code/xaml#onplatform-markup-extension",children:"OnPlatform"})}),(0,t.jsx)(n.td,{children:"Conditionally when on the specified platform"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.a,{href:"/docs/guides/platforms/platform-specific-code/xaml#onformfactor-markup-extension",children:"OnFormFactor"})}),(0,t.jsx)(n.td,{children:"Conditionally when on the specified factor"})]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"compiler-intrinsics",children:"Compiler intrinsics"}),"\n",(0,t.jsxs)(n.p,{children:["These technically fall outside of ",(0,t.jsx)(n.code,{children:"MarkupExtension"}),"s as part of the XAML compiler, but the XAML syntax is the same."]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Intrinsic"}),(0,t.jsx)(n.th,{children:"Assigns to Property"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["x",":True"]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"true"})," literal"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["x",":False"]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"false"})," literal"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["x",":Null"]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"null"})," literal"]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["x",":Static"]}),(0,t.jsx)(n.td,{children:"Static member value"})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:["x",":Type"]}),(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"System.Type"})," literal"]})]})]})]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"x:True"})," and ",(0,t.jsx)(n.code,{children:"x:False"})," literals have use cases where the target binding property is ",(0,t.jsx)(n.code,{children:"object"}),' and you need\nto provide a boolean. In these scenarios that lack type information, providing "True" remains a ',(0,t.jsx)(n.code,{children:"string"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<Button Command="{Binding SetStateCommand}" CommandParameter="{x:True}" />\n'})}),"\n",(0,t.jsx)(n.h2,{id:"creating-markupextensions",children:"Creating MarkupExtensions"}),"\n",(0,t.jsxs)(n.p,{children:["Derive from ",(0,t.jsx)(n.code,{children:"MarkupExtension"})," or add one of the following signatures which are supported via duck-typing:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"T ProvideValue();\nT ProvideValue(IServiceProvider provider);\nobject ProvideValue();\nobject ProvideValue(IServiceProvider provider);\n"})}),"\n",(0,t.jsxs)(n.p,{children:["When strong types are used instead of ",(0,t.jsx)(n.code,{children:"object"}),", you will receive compile-time errors when there is a mismatch in the\nXAML use of constructor parameters, properties, or the return value in ",(0,t.jsx)(n.code,{children:"ProvideValue"}),". When returning ",(0,t.jsx)(n.code,{children:"object"}),", the\nactual type returned must match the target property's type else an ",(0,t.jsx)(n.code,{children:"InvalidCastException"})," is thrown at runtime."]}),"\n",(0,t.jsx)(n.h3,{id:"receiving-literal-parameters",children:"Receiving Literal Parameters"}),"\n",(0,t.jsx)(n.p,{children:"When parameters are required, use a constructor to receive each parameter in order."}),"\n",(0,t.jsx)(n.p,{children:"For optional or unordered parameters, use properties instead. Mix and matching with multiple constructors is allowed,\nincluding parameterless ones."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class MultiplyLiteral\n{\n    private readonly double _first;\n    private readonly double _second;\n    \n    public double? Third { get; set; }\n\n    public MultiplyLiteral(double first, double second)\n    {\n        _first = first;\n        _second = second;\n    }\n\n    public double ProvideValue(IServiceProvider provider)\n    {\n        return First * Second * Third ?? 1;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<TextBlock Text="This has FontSize=40" FontSize="{namespace:MultiplyLiteral 10, 8, Third=0.5}" />\n'})}),"\n",(0,t.jsx)(n.h3,{id:"receiving-parameters-from-bindings",children:"Receiving Parameters From Bindings"}),"\n",(0,t.jsxs)(n.p,{children:["A common scenario is wanting to transform data coming in from a binding and updating the target property. When all parameters\ncome from bindings, this is somewhat straightforward by creating a ",(0,t.jsx)(n.code,{children:"MultiBinding"})," with an ",(0,t.jsx)(n.code,{children:"IMultiValueConverter"}),". In the\nsample below, ",(0,t.jsx)(n.code,{children:"MultiplyBinding"})," requires two bound parameters. If a mix of literal and bound parameters is necessary,\ncreating an ",(0,t.jsx)(n.code,{children:"IMultiValueConverter"})," would allow for passing of literals as constructor or ",(0,t.jsx)(n.code,{children:"init"})," parameters. ",(0,t.jsx)(n.code,{children:"BindingBase"}),"\nallows for both ",(0,t.jsx)(n.code,{children:"CompiledBinding"})," and ",(0,t.jsx)(n.code,{children:"ReflectionBinding"})," to be used, but does not allow literals."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public class MultiplyBinding\n{\n    private readonly BindingBase _first;\n    private readonly BindingBase _second;\n\n    public MultiplyBinding(BindingBase first, BindingBase second)\n    {\n        _first = first;\n        _second = second;\n    }\n\n    public object ProvideValue()\n    {\n        var mb = new MultiBinding()\n        {\n            Bindings = new[] { _first, _second },\n            Converter = new FuncMultiValueConverter<double, double>(doubles => doubles.Aggregate(1d, (x, y) => x * y))\n        };\n\n        return mb;\n    }\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-xml",children:'<TextBlock FontSize="{local:MultiplyBinding {Binding Multiplier}, {Binding Multiplicand}}" \n           Text="MarkupExtension with Bindings!" />\n'})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["An alternate approach is to return an ",(0,t.jsx)(n.code,{children:"IObservable<T>.ToBinding()"})," instead."]})}),"\n",(0,t.jsx)(n.h3,{id:"returning-parameters",children:"Returning Parameters"}),"\n",(0,t.jsxs)(n.p,{children:["To make a ",(0,t.jsx)(n.code,{children:"MarkupExtension"})," compatible with multiple target property types, return an ",(0,t.jsx)(n.code,{children:"object"})," and handle each\nsupported type individually."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public object ProvideValue(IServiceProvider provider)\n{\n    var target = (IProvideValueTarget)provider.GetService(typeof(IProvideValueTarget))!;\n    var targetProperty = target.TargetProperty as AvaloniaProperty;\n    var targetType = targetProperty?.PropertyType;\n\n    double result = First * Second * (Third ?? 1);\n\n    if (targetType == typeof(double))\n        return result;\n    else if (targetType == typeof(float))\n        return (float)result;\n    else if (targetType == typeof(int))\n        return (int)result;\n    else\n        throw new NotSupportedException();\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Constructors can also receive parameter types using the ",(0,t.jsx)(n.code,{children:"object"})," approach, but compile-time errors similarly turn into runtime exceptions."]}),"\n",(0,t.jsx)(n.h3,{id:"markupextension-property-attributes",children:"MarkupExtension Property Attributes"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"[ConstructorArgument]"})," - Associated property may be initialized by a constructor parameter and should be ignored for\nXAML serialization if the constructor is used."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"[MarkupExtensionOption]"}),", ",(0,t.jsx)(n.code,{children:"[MarkupExtensionDefaultOption]"})," - Used with ",(0,t.jsx)(n.code,{children:"ShouldProvideOption"}),", check ",(0,t.jsx)(n.code,{children:"OnPlatform"})," and ",(0,t.jsx)(n.code,{children:"OnFormFactor"})," source for an example."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>a});var i=r(96540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);