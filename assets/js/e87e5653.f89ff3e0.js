"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[6265],{72143:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>p,frontMatter:()=>s,metadata:()=>t,toc:()=>r});const t=JSON.parse('{"id":"concepts/the-main-window","title":"The Main Window","description":"CONCEPTS","source":"@site/docs/concepts/the-main-window.md","sourceDirName":"concepts","slug":"/concepts/the-main-window","permalink":"/avalonia-docs-ko/docs/concepts/the-main-window","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/concepts/the-main-window.md","tags":[],"version":"current","lastUpdatedBy":"202420505","lastUpdatedAt":1755602100000,"frontMatter":{"description":"CONCEPTS"},"sidebar":"documentationSidebar","previous":{"title":"KeyBinding and MouseBinding","permalink":"/avalonia-docs-ko/docs/concepts/input/binding-key-and-mouse"},"next":{"title":"The MVVM Pattern","permalink":"/avalonia-docs-ko/docs/concepts/the-mvvm-pattern/"}}');var o=i(74848),a=i(28453);const s={description:"CONCEPTS"},d="The Main Window",c={},r=[];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"the-main-window",children:"The Main Window"})}),"\n",(0,o.jsxs)(n.p,{children:["The main window is the window passed to ",(0,o.jsx)(n.code,{children:"ApplicationLifetime.MainWindow"})," in the ",(0,o.jsx)(n.code,{children:"OnFrameworkInitializationCompleted"})," method of your ",(0,o.jsx)(n.code,{children:"App.axaml.cs"})," file:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"public override void OnFrameworkInitializationCompleted()\n{\n    if (ApplicationLifetime is IClassicDesktopStyleApplicationLifetime desktopLifetime)\n    {\n        desktopLifetime.MainWindow = new MainWindow();\n    }\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:["It can be retrieved at any time by casting ",(0,o.jsx)(n.code,{children:"Application.Current.ApplicationLifetime"})," to ",(0,o.jsx)(n.code,{children:"IClassicDesktopStyleApplicationLifetime"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Worth mentioning, developers should keep in mind, that using static globals and accessing MainWindow from any place of the app can be dangerous and sometimes cause bad UX. All top-level (window) related APIs should be used from the most specific top-level, usually, it's the latest active one. In this way, user dialogs won't be opened from the wrong window, for example."}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsx)(n.p,{children:"Mobile and browser platforms don't have a concept of Window in Avalonia. Instead, you need to set MainView control in Application.ApplicationLifetime when it implements ISingleViewApplicationLifetime interface."})}),"\n",(0,o.jsx)(n.h3,{id:"",children:(0,o.jsx)("a",{href:"#show-hide-and-close-a-window",id:"show-hide-and-close-a-window"})})]})}function p(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>d});var t=i(96540);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);