"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[5200],{55297:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>r,default:()=>l,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"guides/development-guides/accessing-the-ui-thread","title":"How To Access the UI Thread","description":"This guide will show you how to access the UI thread in your Avalonia UI application.","source":"@site/docs/guides/development-guides/accessing-the-ui-thread.md","sourceDirName":"guides/development-guides","slug":"/guides/development-guides/accessing-the-ui-thread","permalink":"/avalonia-docs-ko/docs/guides/development-guides/accessing-the-ui-thread","draft":false,"unlisted":false,"editUrl":"https://github.com/202420505/avalonia-docs-ko/tree/main/docs/guides/development-guides/accessing-the-ui-thread.md","tags":[],"version":"current","lastUpdatedBy":"Q","lastUpdatedAt":1755602518000,"frontMatter":{"id":"accessing-the-ui-thread","title":"How To Access the UI Thread"},"sidebar":"documentationSidebar","previous":{"title":"Add a Custom Control Class","permalink":"/avalonia-docs-ko/docs/guides/custom-controls/add-custom-control-class"},"next":{"title":"Data Validation","permalink":"/avalonia-docs-ko/docs/guides/development-guides/data-validation"}}');var i=n(74848),o=n(28453);const s={id:"accessing-the-ui-thread",title:"How To Access the UI Thread"},r="How To Access the UI Thread",h={},d=[{value:"Dispatcher Priority",id:"dispatcher-priority",level:2},{value:"Example",id:"example",level:2},{value:"More Information",id:"more-information",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"how-to-access-the-ui-thread",children:"How To Access the UI Thread"})}),"\n",(0,i.jsxs)(t.p,{children:["This guide will show you how to access the UI thread in your ",(0,i.jsx)(t.em,{children:"Avalonia UI"})," application."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)(t.em,{children:"Avalonia UI"})," applications have one main thread, and this handles the UI. When you have a process that is intensive, or long running, then you will usually opt to run it on a different thread. Then you may have scenarios where you want to update them main UI thread (for example with progress updates)."]}),"\n",(0,i.jsxs)(t.p,{children:["A dispatcher provides services for managing work items on any specific thread. In ",(0,i.jsx)(t.em,{children:"Avalonia UI"})," you will already have the dispatcher that handles the UI thread. When you need to update the UI from a different thread, you access it through this dispatcher, as follows:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:"Dispatcher.UIThread\n"})}),"\n",(0,i.jsxs)(t.p,{children:["You can use either the ",(0,i.jsx)(t.code,{children:"Post"})," method or the ",(0,i.jsx)(t.code,{children:"InvokeAsync"})," method to run a process on the UI thread."]}),"\n",(0,i.jsxs)(t.p,{children:["Use ",(0,i.jsx)(t.code,{children:"Post"})," when you just want to start a job, but you do not need to wait for the job to be finished, and you do not need the result: this is the 'fire-and-forget' dispatcher method."]}),"\n",(0,i.jsxs)(t.p,{children:["Use ",(0,i.jsx)(t.code,{children:"InvokeAsync"})," when you need to wait for the result, and potentially want to receive the result."]}),"\n",(0,i.jsx)(t.h2,{id:"dispatcher-priority",children:"Dispatcher Priority"}),"\n",(0,i.jsxs)(t.p,{children:["Both of the above methods have a dispatcher priority parameter. You can use this with the ",(0,i.jsx)(t.code,{children:"DispatcherPriority"})," enumeration to specify the queue priority that the given job should be given."]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["For the possible values of the ",(0,i.jsx)(t.code,{children:"DispatcherPriority"})," enumeration, see ",(0,i.jsx)(t.a,{href:"https://api-docs.avaloniaui.net/docs/T_Avalonia_Threading_DispatcherPriority#fields",children:"here"}),"."]})}),"\n",(0,i.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,i.jsx)(t.p,{children:"This example shows how to access the ui thread from a worker thread to update or get the text of a TextBlock.\nCreate a new Avalonia project and replace the content of the following two files:"}),"\n",(0,i.jsx)(t.p,{children:"MainView.axaml:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",metastring:"title='XAML'",children:'<UserControl xmlns="https://github.com/avaloniaui"\n             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"\n             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"\n             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"\n             xmlns:vm="clr-namespace:AvaloniaApplication1.ViewModels"\n             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"\n             x:Class="AvaloniaApplication1.Views.MainView"\n             x:DataType="vm:MainViewModel">\n  <Design.DataContext>\n    \x3c!-- This only sets the DataContext for the previewer in an IDE,\n         to set the actual DataContext for runtime, set the DataContext property in code (look at App.axaml.cs) --\x3e\n    <vm:MainViewModel />\n  </Design.DataContext>\n\n\t<StackPanel Margin="20">\n\t\t<TextBlock Name="TextBlock1" />\n\t</StackPanel>\n</UserControl>\n'})}),"\n",(0,i.jsx)(t.p,{children:"MainView.axaml.cs:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",metastring:"title='MainView C#'",children:'using Avalonia.Controls;\nusing Avalonia.Threading;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace AvaloniaApplication1.Views;\n\npublic partial class MainView : UserControl\n{\n    public MainView()\n    {\n        InitializeComponent();\n\n        // Execute OnTextFromAnotherThread on the thread pool\n        // to demonstrate how to access the UI thread from\n        // there.\n        _ = Task.Run(() => OnTextFromAnotherThread("test"));\n    }\n\n    private void SetText(string text) => TextBlock1.Text = text;\n    private string GetText() => TextBlock1.Text ?? "";\n\n    private async void OnTextFromAnotherThread(string text)\n    {\n        try\n        {\n            // Start the job on the ui thread and return immediately.\n            Dispatcher.UIThread.Post(() => SetText(text));\n\n            // Start the job on the ui thread and wait for the result.\n            var result = await Dispatcher.UIThread.InvokeAsync(GetText);\n\n            // This invocation would cause an exception because we are\n            // running on a worker thread:\n            // System.InvalidOperationException: \'Call from invalid thread\'\n            //SetText(text);\n        }\n        catch (Exception)\n        {\n            throw; // Todo: Handle exception.\n        }\n    }\n}\n\n'})}),"\n",(0,i.jsx)(t.h2,{id:"more-information",children:"More Information"}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["For the complete API documentation about the dispatcher, see ",(0,i.jsx)(t.a,{href:"https://api-docs.avaloniaui.net/docs/T_Avalonia_Threading_Dispatcher",children:"here"}),"."]})}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["View the source code on ",(0,i.jsx)(t.em,{children:"GitHub"})," ",(0,i.jsx)(t.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Base/Threading/Dispatcher.cs",children:(0,i.jsx)(t.code,{children:"Dispatcher.cs"})})]})})]})}function l(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>r});var a=n(96540);const i={},o=a.createContext(i);function s(e){const t=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);