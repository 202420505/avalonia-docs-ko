"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[8218],{66020:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"deployment/debian-ubuntu","title":"Debian / Ubuntu packaging","description":"Avalonia Linux programs can be executed in most Linux distros by double-clicking the executable or by starting it from the terminal. Nevertheless, for a better user experience, it is recommended to have the program installed, so the user can start it via desktop shortcut, that exists in desktop environments such as GNOME and KDE, or via command-line, by having the program added to PATH.","source":"@site/docs/deployment/debian-ubuntu.md","sourceDirName":"deployment","slug":"/deployment/debian-ubuntu","permalink":"/zh-Hans/docs/deployment/debian-ubuntu","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/deployment/debian-ubuntu.md","tags":[],"version":"current","lastUpdatedBy":"202420505","lastUpdatedAt":1755588461000,"frontMatter":{"id":"debian-ubuntu","title":"Debian / Ubuntu packaging"},"sidebar":"documentationSidebar","previous":{"title":"macOS Deployment","permalink":"/zh-Hans/docs/deployment/macOS"},"next":{"title":"Native AOT Deployment","permalink":"/zh-Hans/docs/deployment/native-aot"}}');var o=i(74848),s=i(28453);const t={id:"debian-ubuntu",title:"Debian / Ubuntu packaging"},a=void 0,l={},c=[{value:"Tutorial",id:"tutorial",level:2},{value:"1) Organize program files in a staging folder",id:"1-organize-program-files-in-a-staging-folder",level:3},{value:"2) Make the <code>control</code> file",id:"2-make-the-control-file",level:3},{value:"3) Make the starter script",id:"3-make-the-starter-script",level:3},{value:"4) Make the desktop shortcut",id:"4-make-the-desktop-shortcut",level:3},{value:"5) Add hicolor icons (optional)",id:"5-add-hicolor-icons-optional",level:3},{value:"6) Compile the <code>.deb</code> package",id:"6-compile-the-deb-package",level:3},{value:"Example of a Linux shell script for the entire process",id:"example-of-a-linux-shell-script-for-the-entire-process",level:2},{value:"To install",id:"to-install",level:2},{value:"To uninstall / remove",id:"to-uninstall--remove",level:2},{value:"Third-party packaging tools for Debian / Ubuntu",id:"third-party-packaging-tools-for-debian--ubuntu",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Avalonia Linux programs can be executed in most Linux distros by double-clicking the executable or by starting it from the terminal. Nevertheless, for a better user experience, it is recommended to have the program installed, so the user can start it via desktop shortcut, that exists in desktop environments such as GNOME and KDE, or via command-line, by having the program added to PATH."}),"\n",(0,o.jsxs)(n.p,{children:["Debian and Ubuntu related distros have their applications packaged in ",(0,o.jsx)(n.code,{children:".deb"})," files, that can be installed via ",(0,o.jsx)(n.code,{children:"sudo apt install ./your_package.deb"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"tutorial",children:"Tutorial"}),"\n",(0,o.jsxs)(n.p,{children:["In this tutorial, we will use the ",(0,o.jsx)(n.code,{children:"dpkg-deb"})," tool to compile your ",(0,o.jsx)(n.code,{children:".deb"})," package."]}),"\n",(0,o.jsx)(n.h3,{id:"1-organize-program-files-in-a-staging-folder",children:"1) Organize program files in a staging folder"}),"\n",(0,o.jsx)(n.p,{children:"Debian packages follow this basic structure:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"./staging_folder/\n\u251c\u2500\u2500 DEBIAN\n\u2502\xa0\xa0 \u2514\u2500\u2500 control # package control file\n\u2514\u2500\u2500 usr\n    \u251c\u2500\u2500 bin\n    \u2502\xa0\xa0 \u2514\u2500\u2500 myprogram # starter script\n    \u251c\u2500\u2500 lib\n    \u2502\xa0\xa0 \u2514\u2500\u2500 myprogram\n    \u2502\xa0\xa0     \u251c\u2500\u2500 libHarfBuzzSharp.so # Avalonia native library\n    \u2502\xa0\xa0     \u251c\u2500\u2500 libSkiaSharp.so # Avalonia native library\n    \u2502\xa0\xa0     \u251c\u2500\u2500 other_native_library_1.so\n    \u2502\xa0\xa0     \u251c\u2500\u2500 myprogram_executable # main executable\n    \u2502\xa0\xa0     \u251c\u2500\u2500 myprogram.dll \n    \u2502\xa0\xa0     \u251c\u2500\u2500 my_other_dll.dll \n    \u2502\xa0\xa0     \u251c\u2500\u2500 ... # all files from dotnet publish\n    \u2514\u2500\u2500 share\n        \u251c\u2500\u2500 applications\n        \u2502\xa0\xa0 \u2514\u2500\u2500 MyProgram.desktop # desktop shortcut file\n        \u251c\u2500\u2500 icons\n        \u2502\xa0\xa0 \u2514\u2500\u2500 hicolor\n        \u2502\xa0\xa0     \u251c\u2500\u2500 ... # other resolution icons (optional)\n        \u2514\u2500\u2500 pixmaps\n            \u2514\u2500\u2500 myprogram.png # main application icon\n"})}),"\n",(0,o.jsx)(n.p,{children:"Meaning of each folder:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"DEBIAN"}),": contains the ",(0,o.jsx)(n.code,{children:"control"})," file."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"/usr/bin/"}),": contains the starter script (recommended for starting your program via command-line)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"/usr/lib/myprogram/"}),": where all files generated by ",(0,o.jsx)(n.code,{children:"dotnet publish"})," go into."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"/usr/share/applications/"}),": folder for the desktop shortcut."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"/usr/share/pixmaps/"})," and ",(0,o.jsx)(n.code,{children:"/usr/share/icons/hicolor/**"}),": folders for application icons."]}),"\n"]}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"/usr/share/icons/hicolor/**"})," are optional, as in your app icon will probably show up on desktop even without those images, however, it is recommended to have them for better resolution."]})}),"\n",(0,o.jsxs)(n.h3,{id:"2-make-the-control-file",children:["2) Make the ",(0,o.jsx)(n.code,{children:"control"})," file"]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"control"})," file goes inside the ",(0,o.jsx)(n.code,{children:"DEBIAN"})," folder."]}),"\n",(0,o.jsxs)(n.p,{children:["This file describes general aspects of your program, such as its name, version, category, dependencies, maintainer, processor architecture and licenses. ",(0,o.jsx)(n.a,{href:"https://www.debian.org/doc/debian-policy/ch-controlfields.html",children:"Debian docs"})," have a more thorough description of all possible fields in the file."]}),"\n",(0,o.jsx)(n.admonition,{title:"Author's comment",type:"tip",children:(0,o.jsx)(n.p,{children:"Don't worry too much about filling all possible fields, most aren't required. This tutorial is to make a \"good-enough\" Debian package."})}),"\n",(0,o.jsxs)(n.p,{children:["The .NET dependencies can be listed by running ",(0,o.jsx)(n.code,{children:"apt show dotnet-runtime-deps-8.0"})," (suffix changes for other .NET versions); they will appear on the line starting with ",(0,o.jsx)(n.em,{children:"Depends: ..."}),". You can also check them in the ",(0,o.jsx)(n.a,{href:"https://github.com/dotnet/core/blob/main/release-notes/8.0/linux-packages.md",children:".NET Core repo"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Avalonia required dependencies are: ",(0,o.jsx)(n.code,{children:"libx11-6, libice6, libsm6, libfontconfig1"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Overall, all .NET and Avalonia dependencies are required, plus any others specific of your app."}),"\n",(0,o.jsxs)(n.p,{children:["Below is a simple example of a ",(0,o.jsx)(n.code,{children:"control"})," file."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-yaml",children:"Package: myprogram\nVersion: 3.1.0\nSection: devel\nPriority: optional\nArchitecture: amd64\nInstalled-Size: 68279\nDepends: libx11-6, libice6, libsm6, libfontconfig1, ca-certificates, tzdata, libc6, libgcc1 | libgcc-s1, libgssapi-krb5-2, libstdc++6, zlib1g, libssl1.0.0 | libssl1.0.2 | libssl1.1 | libssl3, libicu | libicu74 | libicu72 | libicu71 | libicu70 | libicu69 | libicu68 | libicu67 | libicu66 | libicu65 | libicu63 | libicu60 | libicu57 | libicu55 | libicu52\nMaintainer: Ken Lee <kenlee@outlook.com>\nHomepage: https://github.com/kenlee/myprogram\nDescription: This is MyProgram, great for doing X.\nCopyright: 2022-2024 Ken Lee <kenlee@outlook.com>\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-make-the-starter-script",children:"3) Make the starter script"}),"\n",(0,o.jsx)(n.p,{children:"This step is recommended for two reasons: first, to reduce the complexity of the desktop shortcut, and second, to make your app runnable from Terminal."}),"\n",(0,o.jsxs)(n.p,{children:["The starter script file name should preferrably be ",(0,o.jsx)(n.code,{children:"myprogram"})," (without ",(0,o.jsx)(n.code,{children:".sh"}),' extension), so whenever your user types "myprogram" on the Terminal, he / she will start your program.']}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.strong,{children:"myprogram_executable"})," file usually has the same name as its .NET project, e.g., if your Avalonia .csproj project is named ",(0,o.jsx)(n.em,{children:"MyProgram.Desktop"}),", then the main executable generated by dotnet publish will be ",(0,o.jsx)(n.code,{children:"MyProgram.Desktop"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Example of starter script:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:'#!/bin/bash\n# use exec to not have the wrapper script staying as a separate process\n# "$@" to pass command line arguments to the app\nexec /usr/lib/myprogram/myprogram_executable "$@"\n'})}),"\n",(0,o.jsx)(n.h3,{id:"4-make-the-desktop-shortcut",children:"4) Make the desktop shortcut"}),"\n",(0,o.jsxs)(n.p,{children:["The desktop shortcut file follows the ",(0,o.jsx)(n.a,{href:"https://specifications.freedesktop.org/desktop-entry-spec/desktop-entry-spec-latest.html#recognized-keys",children:"freedesktop specification"}),". Arch Linux Wiki also has ",(0,o.jsx)(n.a,{href:"https://wiki.archlinux.org/title/Desktop_entries",children:"good related information"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Below is an example of a desktop shortcut file."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-conf",children:"[Desktop Entry]\nName=MyProgram\nComment=MyProgram, great for doing X\nIcon=myprogram\nExec=myprogram\nStartupWMClass=myprogram\nTerminal=false\nType=Application\nCategories=Development\nGenericName=MyProgram\nKeywords=keyword1; keyword2; keyword3\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["If your app is supposed to open files, append ",(0,o.jsx)(n.strong,{children:"%F"})," at the end of the Exec line, after ",(0,o.jsx)(n.code,{children:"myprogram"}),"; if it's supposed to open URLs, then append ",(0,o.jsx)(n.strong,{children:"%U"}),"."]})}),"\n",(0,o.jsx)(n.h3,{id:"5-add-hicolor-icons-optional",children:"5) Add hicolor icons (optional)"}),"\n",(0,o.jsx)(n.p,{children:"Hicolor icons follow a folder structure like below."}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.a,{href:"https://martin.hoppenheit.info/blog/2016/where-to-put-application-icons-on-linux/",children:"This blog post"})," advises us to put icons on both ",(0,o.jsx)(n.code,{children:"hicolor"})," and ",(0,o.jsx)(n.code,{children:"pixmaps"})," directories, according to ",(0,o.jsx)(n.a,{href:"https://www.debian.org/doc/packaging-manuals/menu.html/ch3.html#s3.7",children:"Debian Menu System docs"})," and ",(0,o.jsx)(n.a,{href:"https://specifications.freedesktop.org/icon-theme-spec/icon-theme-spec-0.11.html#install_icons",children:"FreeDesktop docs"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"\u251c\u2500\u2500 icons\n\u2502\xa0\xa0 \u2514\u2500\u2500 hicolor\n\u2502\xa0\xa0     \u251c\u2500\u2500 128x128\n\u2502\xa0\xa0     \u2502\xa0\xa0 \u2514\u2500\u2500 apps\n\u2502\xa0\xa0     \u2502\xa0\xa0     \u2514\u2500\u2500 myprogram.png\n\u2502\xa0\xa0     \u251c\u2500\u2500 16x16\n\u2502\xa0\xa0     \u2502\xa0\xa0 \u2514\u2500\u2500 apps\n\u2502\xa0\xa0     \u2502\xa0\xa0     \u2514\u2500\u2500 myprogram.png\n\u2502\xa0\xa0     \u251c\u2500\u2500 256x256\n\u2502\xa0\xa0     \u2502\xa0\xa0 \u2514\u2500\u2500 apps\n\u2502\xa0\xa0     \u2502\xa0\xa0     \u2514\u2500\u2500 myprogram.png\n\u2502\xa0\xa0     \u251c\u2500\u2500 32x32\n\u2502\xa0\xa0     \u2502\xa0\xa0 \u2514\u2500\u2500 apps\n\u2502\xa0\xa0     \u2502\xa0\xa0     \u2514\u2500\u2500 myprogram.png\n\u2502\xa0\xa0     \u251c\u2500\u2500 48x48\n\u2502\xa0\xa0     \u2502\xa0\xa0 \u2514\u2500\u2500 apps\n\u2502\xa0\xa0     \u2502\xa0\xa0     \u2514\u2500\u2500 myprogram.png\n\u2502\xa0\xa0     \u251c\u2500\u2500 512x512\n\u2502\xa0\xa0     \u2502\xa0\xa0 \u2514\u2500\u2500 apps\n\u2502\xa0\xa0     \u2502\xa0\xa0     \u2514\u2500\u2500 myprogram.png\n\u2502\xa0\xa0     \u251c\u2500\u2500 64x64\n\u2502\xa0\xa0     \u2502\xa0\xa0 \u2514\u2500\u2500 apps\n\u2502\xa0\xa0     \u2502\xa0\xa0     \u2514\u2500\u2500 myprogram.png\n\u2502\xa0\xa0     \u2514\u2500\u2500 scalable\n\u2502\xa0\xa0         \u2514\u2500\u2500 apps\n\u2502\xa0\xa0             \u2514\u2500\u2500 myprogram.svg\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"6-compile-the-deb-package",children:["6) Compile the ",(0,o.jsx)(n.code,{children:".deb"})," package"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:'# for x64 architectures, the suggested suffix is amd64.\ndpkg-deb --root-owner-group --build ./staging_folder/ "./myprogram_${versionName}_amd64.deb"\n'})}),"\n",(0,o.jsx)(n.h2,{id:"example-of-a-linux-shell-script-for-the-entire-process",children:"Example of a Linux shell script for the entire process"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:'#!/bin/bash\n\n# Clean-up\nrm -rf ./out/\nrm -rf ./staging_folder/\n\n# .NET publish\n# self-contained is recommended, so final users won\'t need to install .NET\ndotnet publish "./src/MyProgram.Desktop/MyProgram.Desktop.csproj" \\\n  --verbosity quiet \\\n  --nologo \\\n  --configuration Release \\\n  --self-contained true \\\n  --runtime linux-x64 \\\n  --output "./out/linux-x64"\n\n# Staging directory\nmkdir staging_folder\n\n# Debian control file\nmkdir ./staging_folder/DEBIAN\ncp ./src/MyProgram.Desktop.Debian/control ./staging_folder/DEBIAN\n\n# Starter script\nmkdir ./staging_folder/usr\nmkdir ./staging_folder/usr/bin\ncp ./src/MyProgram.Desktop.Debian/myprogram.sh ./staging_folder/usr/bin/myprogram\nchmod +x ./staging_folder/usr/bin/myprogram # set executable permissions to starter script\n\n# Other files\nmkdir ./staging_folder/usr/lib\nmkdir ./staging_folder/usr/lib/myprogram\ncp -f -a ./out/linux-x64/. ./staging_folder/usr/lib/myprogram/ # copies all files from publish dir\nchmod -R a+rX ./staging_folder/usr/lib/myprogram/ # set read permissions to all files\nchmod +x ./staging_folder/usr/lib/myprogram/myprogram_executable # set executable permissions to main executable\n\n# Desktop shortcut\nmkdir ./staging_folder/usr/share\nmkdir ./staging_folder/usr/share/applications\ncp ./src/MyProgram.Desktop.Debian/MyProgram.desktop ./staging_folder/usr/share/applications/MyProgram.desktop\n\n# Desktop icon\n# A 1024px x 1024px PNG, like VS Code uses for its icon\nmkdir ./staging_folder/usr/share/pixmaps\ncp ./src/MyProgram.Desktop.Debian/myprogram_icon_1024px.png ./staging_folder/usr/share/pixmaps/myprogram.png\n\n# Hicolor icons\nmkdir ./staging_folder/usr/share/icons\nmkdir ./staging_folder/usr/share/icons/hicolor\nmkdir ./staging_folder/usr/share/icons/hicolor/scalable\nmkdir ./staging_folder/usr/share/icons/hicolor/scalable/apps\ncp ./misc/myprogram_logo.svg ./staging_folder/usr/share/icons/hicolor/scalable/apps/myprogram.svg\n\n# Make .deb file\ndpkg-deb --root-owner-group --build ./staging_folder/ ./myprogram_3.1.0_amd64.deb\n'})}),"\n",(0,o.jsx)(n.h2,{id:"to-install",children:"To install"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"sudo apt install ./myprogram_3.1.0_amd64.deb\n"})}),"\n",(0,o.jsx)(n.h2,{id:"to-uninstall--remove",children:"To uninstall / remove"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-sh",children:"sudo apt remove myprogram\n"})}),"\n",(0,o.jsx)(n.h2,{id:"third-party-packaging-tools-for-debian--ubuntu",children:"Third-party packaging tools for Debian / Ubuntu"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/quamotion/dotnet-packaging",children:"https://github.com/quamotion/dotnet-packaging"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/SuperJMN/DotnetPackaging",children:"https://github.com/SuperJMN/DotnetPackaging"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/kuiperzone/PupNet-Deploy",children:"https://github.com/kuiperzone/PupNet-Deploy"})}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var r=i(96540);const o={},s=r.createContext(o);function t(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);