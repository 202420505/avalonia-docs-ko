"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[5414],{91710:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"embedding/web-view","title":"Using WebView control","description":"Overview","source":"@site/xpf/embedding/web-view.md","sourceDirName":"embedding","slug":"/embedding/web-view","permalink":"/zh-Hans/xpf/embedding/web-view","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/xpf/embedding/web-view.md","tags":[],"version":"current","frontMatter":{"id":"web-view","title":"Using WebView control"},"sidebar":"documentationSidebar","previous":{"title":"XPF in Avalonia","permalink":"/zh-Hans/xpf/embedding/xpf-in-avalonia"},"next":{"title":"Accessing Avalonia Features","permalink":"/zh-Hans/xpf/advanced/avalonia-interop"}}');var s=n(74848),a=n(28453);const d={id:"web-view",title:"Using WebView control"},r=void 0,l={},o=[{value:"Overview",id:"overview",level:2},{value:"Installing AvaloniaUI.WebView.Wpf package",id:"installing-avaloniauiwebviewwpf-package",level:2},{value:"Using NativeWebView control",id:"using-nativewebview-control",level:2},{value:"Handling navigation events",id:"handling-navigation-events",level:2},{value:"Bi-directional JavaScript execution",id:"bi-directional-javascript-execution",level:2},{value:"Using with native WPF",id:"using-with-native-wpf",level:2},{value:"Platform compatibility:",id:"platform-compatibility",level:2},{value:"Accelerate WebView",id:"accelerate-webview",level:2}];function c(e){const i={a:"a",admonition:"admonition",code:"code",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(i.p,{children:"Windows provides several controls to embed native WebView inside of the application.\nThe same controls can't be supported in cross platform environment, as these browsers are usually tied to a Windows."}),"\n",(0,s.jsxs)(i.p,{children:["XPF provides an optional control that abstracts over ",(0,s.jsx)(i.code,{children:"WebView2"})," on Windows and ",(0,s.jsx)(i.code,{children:"WKWebView"})," on macOS. Native browsers that don't require any heavy dependencies like Chromium."]}),"\n",(0,s.jsx)(i.admonition,{type:"note",children:(0,s.jsx)(i.p,{children:"Since Linux doesn't have any standardized built-in native browser, this platform is not currently supported."})}),"\n",(0,s.jsx)(i.h2,{id:"installing-avaloniauiwebviewwpf-package",children:"Installing AvaloniaUI.WebView.Wpf package"}),"\n",(0,s.jsxs)(i.p,{children:["First of all, make sure you have installed XPF nuget feed as per ",(0,s.jsx)(i.a,{href:"/zh-Hans/xpf/build-feeds",children:"instruction"}),"."]}),"\n",(0,s.jsxs)(i.p,{children:["With nuget feed working, install ",(0,s.jsx)(i.code,{children:"Avalonia.Xpf.Controls.WebView"})," package:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-xml",children:'<PackageReference Include="Avalonia.Xpf.Controls.WebView" Version="11.3.3" />\n'})}),"\n",(0,s.jsx)(i.admonition,{type:"note",children:(0,s.jsx)(i.p,{children:"Please use latest version if available. You can check newer versions in the IDE NuGet Packages window.\nOn Windows, when WebView2 is not available, legacy Internet Explorer is embedded. It's useful when targeting older Windows versions."})}),"\n",(0,s.jsx)(i.h2,{id:"using-nativewebview-control",children:"Using NativeWebView control"}),"\n",(0,s.jsxs)(i.p,{children:["Add ",(0,s.jsx)(i.code,{children:'xmlns:wpf="clr-namespace:Avalonia.Xpf.Controls;assembly=Avalonia.Xpf.Controls.WebView"'})," xmlns to your XAML file."]}),"\n",(0,s.jsx)(i.p,{children:"Typical usage of the NativeWebView looks like this:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-xml",children:'<wpf:NativeWebView Source="https://avaloniaui.net/" />\n'})}),"\n",(0,s.jsxs)(i.p,{children:["Where ",(0,s.jsx)(i.code,{children:"Source"})," is a bindable property."]}),"\n",(0,s.jsx)(i.h2,{id:"handling-navigation-events",children:"Handling navigation events"}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.code,{children:"NativeWebView"})," supports two navigation events:"]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"NavigationStarted"})," is raised when web page navigation was started. You can read the request Uri from ",(0,s.jsx)(i.code,{children:"WebViewNavigationStartingEventArgs.Request"}),". And it's possible to cancel navigation via ",(0,s.jsx)(i.code,{children:"WebViewNavigationStartingEventArgs.Cancel"})," property. This event also handles redirects."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"NavigationCompleted"})," is raised when web page navigation has completed. And ",(0,s.jsx)(i.code,{children:"WebViewNavigationCompletedEventArgs"})," provides ",(0,s.jsx)(i.code,{children:"Request"})," as well as ",(0,s.jsx)(i.code,{children:"IsSuccess"})," properties."]}),"\n"]}),"\n",(0,s.jsx)(i.h2,{id:"bi-directional-javascript-execution",children:"Bi-directional JavaScript execution"}),"\n",(0,s.jsxs)(i.p,{children:["In some situations it's necessary to execute arbitrary JavaScript code from the web view control.\n",(0,s.jsx)(i.code,{children:"NativeWebView"})," provides ",(0,s.jsx)(i.code,{children:"InvokeScript"})," async method:"]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-csharp",children:"webView.InvokeScript(\"console.log('Hello World')\");\n"})}),"\n",(0,s.jsxs)(i.p,{children:["When it's required to receive a data from the JavaScript (web page) and process it on the C# side, you can use ",(0,s.jsx)(i.code,{children:"NativeWebView.WebMessageReceived"})," event combined with ",(0,s.jsx)(i.code,{children:"invokeCSharpAction"})," helper JS method."]}),"\n",(0,s.jsx)(i.p,{children:"Complete bi-directional example looks like this:"}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-csharp",children:'private async void NativeWebView_OnNavigationCompleted(object? sender, WebViewNavigationCompletedEventArgs e)\n{\n    await ((NativeWebView)sender!).InvokeScript(""" invokeCSharpAction("{\'key\': 10}") """);\n}\n\nprivate void NativeWebView_OnWebMessageReceived(object? sender, WebMessageReceivedEventArgs e)\n{\n    var message = e.Body;\n    // message == "{\'key\': 10}"\n}\n'})}),"\n",(0,s.jsx)(i.p,{children:(0,s.jsx)(i.img,{alt:"alt text",src:n(64522).A+"",width:"1296",height:"1656"})}),"\n",(0,s.jsx)(i.h2,{id:"using-with-native-wpf",children:"Using with native WPF"}),"\n",(0,s.jsxs)(i.p,{children:["To streamline code migration, it's also possible to use ",(0,s.jsx)(i.code,{children:"NativeWebView"})," control with native WPF on Windows. Without XPF involving."]}),"\n",(0,s.jsx)(i.p,{children:"In this scenario, all the API members and underlying browsers are the same. As well as steps to install, the same package can be used."}),"\n",(0,s.jsx)(i.h2,{id:"platform-compatibility",children:"Platform compatibility:"}),"\n",(0,s.jsxs)(i.table,{children:[(0,s.jsx)(i.thead,{children:(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.th,{children:"Feature"}),(0,s.jsx)(i.th,{children:"Windows WebView2-Edge"}),(0,s.jsx)(i.th,{children:"Windows IE (fallback)"}),(0,s.jsx)(i.th,{children:"macOS WKWebView"}),(0,s.jsx)(i.th,{children:"Linux"})]})}),(0,s.jsxs)(i.tbody,{children:[(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"NativeWebView"})}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2716"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"Source"})}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2716"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"NavigationStarted"})}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2716"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"NavigationCompleted"})}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2716"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"WebMessageReceived"})}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2716"}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2716"})]}),(0,s.jsxs)(i.tr,{children:[(0,s.jsx)(i.td,{children:(0,s.jsx)(i.code,{children:"InvokeScript"})}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2716"}),(0,s.jsx)(i.td,{children:"\u2714"}),(0,s.jsx)(i.td,{children:"\u2716"})]})]})]}),"\n",(0,s.jsx)(i.h2,{id:"accelerate-webview",children:"Accelerate WebView"}),"\n",(0,s.jsxs)(i.p,{children:["XPF NativeWebView control is based on Avalonia Accelerate version of ",(0,s.jsx)(i.a,{href:"https://docs.avaloniaui.net/accelerate/components/webview/nativewebview",children:"NativeWebView"}),".\nAll functionality and configuration documentation can be applied for both."]})]})}function h(e={}){const{wrapper:i}={...(0,a.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},64522:(e,i,n)=>{n.d(i,{A:()=>t});const t=n.p+"assets/images/webview-3c0d3c4924121d3c60bf0df7988597cb.png"},28453:(e,i,n)=>{n.d(i,{R:()=>d,x:()=>r});var t=n(96540);const s={},a=t.createContext(s);function d(e){const i=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:d(e.components),t.createElement(a.Provider,{value:i},e.children)}}}]);