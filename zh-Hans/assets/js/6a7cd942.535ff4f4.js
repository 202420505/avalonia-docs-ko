"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[8349],{15161:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"tools/dev-tools/tools/elements/properties","title":"Element Properties","description":"The Properties panel shows detailed information about the selected element in the Elements tree, displaying all properties, styles, and values affecting the element.","source":"@site/accelerate/tools/dev-tools/tools/elements/properties.md","sourceDirName":"tools/dev-tools/tools/elements","slug":"/tools/dev-tools/tools/elements/properties","permalink":"/zh-Hans/accelerate/tools/dev-tools/tools/elements/properties","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/accelerate/tools/dev-tools/tools/elements/properties.md","tags":[],"version":"current","frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Application Elements Tool","permalink":"/zh-Hans/accelerate/tools/dev-tools/tools/elements/"},"next":{"title":"In-App Overlay","permalink":"/zh-Hans/accelerate/tools/dev-tools/tools/elements/overlay"}}');var n=s(74848),r=s(28453);const l={},o="Element Properties",a={},d=[{value:"Property Details",id:"property-details",level:2},{value:"Styles and values",id:"styles-and-values",level:3},{value:"Binding Expressions",id:"binding-expressions",level:3}];function p(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"element-properties",children:"Element Properties"})}),"\n",(0,n.jsxs)(t.p,{children:["The Properties panel shows detailed information about the selected element in the ",(0,n.jsx)(t.a,{href:"/zh-Hans/accelerate/tools/dev-tools/tools/elements/",children:"Elements"})," tree, displaying all properties, styles, and values affecting the element."]}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Properties list",src:s(76945).A+"",width:"1201",height:"648"})}),"\n",(0,n.jsx)(t.p,{children:"The panel displays all Avalonia properties assigned to the element. Developers can:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Filter properties by name"}),"\n",(0,n.jsx)(t.li,{children:"Sort properties alphabetically or by value"}),"\n",(0,n.jsx)(t.li,{children:"Group properties by categories"}),"\n",(0,n.jsx)(t.li,{children:"Edit values using specialized editors (ColorPicker, BrushPicker, Image/Geometry previews)"}),"\n",(0,n.jsxs)(t.li,{children:["Properties with nested grids are clickable, allowing to preview ",(0,n.jsx)(t.code,{children:"DataContext"})," or ",(0,n.jsx)(t.code,{children:"Image.Source"}),"-like properties."]}),"\n"]}),"\n",(0,n.jsx)(t.h2,{id:"property-details",children:"Property Details"}),"\n",(0,n.jsx)(t.p,{children:"When a developer selects a property, additional details become available through two specialized tabs."}),"\n",(0,n.jsx)(t.h3,{id:"styles-and-values",children:"Styles and values"}),"\n",(0,n.jsx)(t.p,{children:"Avalonia properties operate on a priority-based system where multiple values can be assigned to a single property. The Properties panel reveals this layered approach:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Styles setters",src:s(881).A+"",width:"499",height:"501"})}),"\n",(0,n.jsx)(t.p,{children:"Each property can have multiple setters with different priorities and conditions. For example, a button might have different background colors defined for its normal state, hover state, and pressed state. The DevTools shows all these setters, with the currently active one expanded by default."}),"\n",(0,n.jsx)(t.p,{children:"Inactive setters (those whose conditions aren't currently met) appear collapsed and grayed-out. This visual hierarchy helps developers understand which style is currently applied and why, making it easier to debug styling issues."}),"\n",(0,n.jsx)(t.h3,{id:"binding-expressions",children:"Binding Expressions"}),"\n",(0,n.jsx)(t.p,{children:"The Binding Expressions tab reveals how properties are connected to data sources:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"Binding Expressions",src:s(1455).A+"",width:"498",height:"581"})}),"\n",(0,n.jsx)(t.p,{children:"When a property uses data binding, this tab shows crucial information about the binding relationship:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Source and Path of the binding"}),"\n",(0,n.jsx)(t.li,{children:"Validation errors if the binding is failing"}),"\n",(0,n.jsx)(t.li,{children:"Additional binding parameters like Mode, Converter, and FallbackValue"}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"For properties with validation errors, the panel displays the exception type and message, including any inner exceptions that might provide additional context for debugging."}),"\n",(0,n.jsx)(t.p,{children:"Some properties use MultiBinding expressions that combine multiple sources:"}),"\n",(0,n.jsx)(t.p,{children:(0,n.jsx)(t.img,{alt:"MultiBinding Expressions",src:s(39119).A+"",width:"508",height:"515"})})]})}function c(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(p,{...e})}):p(e)}},1455:(e,t,s)=>{s.d(t,{A:()=>i});const i=s.p+"assets/images/properties-bindings-597c97d7d994fb6768bc8c089ae12210.png"},76945:(e,t,s)=>{s.d(t,{A:()=>i});const i=s.p+"assets/images/properties-list-1853895cba1c9fc2830ac456e1d6521e.png"},39119:(e,t,s)=>{s.d(t,{A:()=>i});const i=s.p+"assets/images/properties-multi-bindings-47f031f6f7beedfbd69d6c9daebc5a12.png"},881:(e,t,s)=>{s.d(t,{A:()=>i});const i=s.p+"assets/images/properties-style-setters-0ff1f64e18da69cf730470a258470f9b.png"},28453:(e,t,s)=>{s.d(t,{R:()=>l,x:()=>o});var i=s(96540);const n={},r=i.createContext(n);function l(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:l(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);