"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[4496],{47607:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"reference/controls/treedatagrid/treedatagrid-column-types","title":"Tree Data Grid Column Types","description":"REFERENCE - Built-in Controls","source":"@site/docs/reference/controls/treedatagrid/treedatagrid-column-types.md","sourceDirName":"reference/controls/treedatagrid","slug":"/reference/controls/treedatagrid/treedatagrid-column-types","permalink":"/zh-Hans/docs/reference/controls/treedatagrid/treedatagrid-column-types","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/reference/controls/treedatagrid/treedatagrid-column-types.md","tags":[],"version":"current","lastUpdatedBy":"202420505","lastUpdatedAt":1755588461000,"frontMatter":{"description":"REFERENCE - Built-in Controls"},"sidebar":"documentationSidebar","previous":{"title":"Hierarchical Tree Data Grid","permalink":"/zh-Hans/docs/reference/controls/treedatagrid/creating-a-hierarchical-treedatagrid"},"next":{"title":"TreeView","permalink":"/zh-Hans/docs/reference/controls/treeview-1"}}');var a=n(74848),s=n(28453);const i={description:"REFERENCE - Built-in Controls"},c="Tree Data Grid Column Types",o={},l=[{value:"Text Column",id:"text-column",level:3},{value:"Hierarchical Expander Column",id:"hierarchical-expander-column",level:3},{value:"Template Column",id:"template-column",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"tree-data-grid-column-types",children:"Tree Data Grid Column Types"})}),"\n",(0,a.jsx)(t.p,{children:"The tree data grid supports three different column types:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:"Text Column"}),"\n",(0,a.jsx)(t.li,{children:"Hierarchical Expander Column"}),"\n",(0,a.jsx)(t.li,{children:"Template Column"}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"text-column",children:"Text Column"}),"\n",(0,a.jsxs)(t.p,{children:["A text column (class ",(0,a.jsx)(t.code,{children:"TextColumn"}),") is useful when you want the cells in a column to have text values. A text column is created like this:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'new TextColumn<ItemClass, string>("Column Header", x => x.Property)\n'})}),"\n",(0,a.jsx)(t.p,{children:"The first generic parameter here is the class of the items that make up the grid rows. The second generic parameter here is the type of the property."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:"https://user-images.githubusercontent.com/53405089/157456551-dd394781-903a-4c7b-8874-e631e21534a1.png",alt:""})}),"\n",(0,a.jsxs)(t.p,{children:["The above is the signature of the ",(0,a.jsx)(t.code,{children:"TextColumn"})," constructor. The first two parameters are required: the first is the column header, and the second is an expression to get the value of the property."]}),"\n",(0,a.jsxs)(t.p,{children:["The ",(0,a.jsx)(t.code,{children:"TextColumn"})," class implements the column interface ",(0,a.jsx)(t.code,{children:"IColumn"}),"."]}),"\n",(0,a.jsx)(t.h3,{id:"hierarchical-expander-column",children:"Hierarchical Expander Column"}),"\n",(0,a.jsxs)(t.p,{children:["A hierarchical expander column (class: ",(0,a.jsx)(t.code,{children:"HierarchicalExpanderColumn"}),") can only be used with the ",(0,a.jsx)(t.em,{children:"hierarchical"})," data mode of operation, and it must be used with the data source class ",(0,a.jsx)(t.code,{children:"HierarchicalTreeDataGridSource"}),". This column type must contain an inner column (interface ",(0,a.jsx)(t.code,{children:"IColumn"}),") to define its header and value property. A hierarchical expander column displays the expand and contract chevron buttons in a hierarchical tree data grid."]}),"\n",(0,a.jsx)(t.p,{children:"This column type is created like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'new HierarchicalExpanderColumn<ItemClass>(\n    new TextColumn<ItemClass, string>("Column Header", x => x.Property), \n    x => x.Children)\n'})}),"\n",(0,a.jsx)(t.p,{children:"The generic parameter is the class of the items that make up the grid rows. This is the same as the item class for the inner column."}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:"https://user-images.githubusercontent.com/53405089/157536079-fd14f1ed-0a7d-438a-abba-fd56766709a9.png",alt:""})}),"\n",(0,a.jsxs)(t.p,{children:["The above is the signature of the ",(0,a.jsx)(t.code,{children:"HierarchicalExpanderColumn"})," constructor. The first parameter in the constructor is the inner column, and the second parameter is a (nullable) selector for any child elements."]}),"\n",(0,a.jsx)(t.h3,{id:"template-column",children:"Template Column"}),"\n",(0,a.jsxs)(t.p,{children:["The template column (class ",(0,a.jsx)(t.code,{children:"TemplateColumn"}),") is a fully customizable way for you to create a column. It essentially forms a ",(0,a.jsx)(t.strong,{children:"data template"})," for the column."]}),"\n",(0,a.jsx)(t.p,{children:"You create a template column like this:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-csharp",children:'new TemplateColumn<ItemClass>("Column Header",\n       new FuncDataTemplate<T>((a,e) => new SomeControl()))\n'})}),"\n",(0,a.jsx)(t.p,{children:(0,a.jsx)(t.img,{src:"https://user-images.githubusercontent.com/53405089/157664231-8653bce9-f8d6-4fbc-8e78-e3ff93f1ace2.png",alt:""})}),"\n",(0,a.jsxs)(t.p,{children:["The above is the signature of the ",(0,a.jsx)(t.code,{children:"TemplateColumn"}),"constructor.  It has two required parameters: the first is the column header, and the second is a function that returns ",(0,a.jsx)(t.code,{children:"IDataTemplate"}),"."]}),"\n",(0,a.jsx)(t.admonition,{type:"info",children:(0,a.jsxs)(t.p,{children:["For more information about the concept of creating a ",(0,a.jsx)(t.strong,{children:"data template"})," in code, see ",(0,a.jsx)(t.a,{href:"../../../concepts/templates/creating-data-templates-in-code",children:"here"}),"."]})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>c});var r=n(96540);const a={},s=r.createContext(a);function i(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);