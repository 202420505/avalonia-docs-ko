"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[5300],{97912:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"get-started/wpf/class-handlers","title":"Class Handlers","description":"In WPF, class handlers for events can be added by calling EventManager.RegisterClassHandler. An example of registering a class handler in WPF might be:","source":"@site/docs/get-started/wpf/class-handlers.md","sourceDirName":"get-started/wpf","slug":"/get-started/wpf/class-handlers","permalink":"/zh-Hans/docs/get-started/wpf/class-handlers","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/get-started/wpf/class-handlers.md","tags":[],"version":"current","lastUpdatedBy":"202420505","lastUpdatedAt":1755588461000,"frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Tunnelling Events","permalink":"/zh-Hans/docs/get-started/wpf/tunnelling-events"},"next":{"title":"PropertyChangedCallback","permalink":"/zh-Hans/docs/get-started/wpf/propertychangedcallback"}}');var s=t(74848),r=t(28453);const l={},o="Class Handlers",d={},c=[];function i(e){const n={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components},{XpfAd:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("XpfAd",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"class-handlers",children:"Class Handlers"})}),"\n",(0,s.jsxs)(n.p,{children:["In WPF, class handlers for events can be added by calling ",(0,s.jsx)(n.a,{href:"https://msdn.microsoft.com/en-us/library/ms597875.aspx",children:"EventManager.RegisterClassHandler"}),". An example of registering a class handler in WPF might be:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"title='WPF'",children:"static MyControl()\n{\n    EventManager.RegisterClassHandler(typeof(MyControl), MyEvent, HandleMyEvent));\n}\n\nprivate static void HandleMyEvent(object sender, RoutedEventArgs e)\n{\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-csharp",metastring:"title='Avalonia'",children:"static MyControl()\n{\n    MyEvent.AddClassHandler<MyControl>((x, e) => x.HandleMyEvent(e));\n}\n\nprivate void HandleMyEvent(RoutedEventArgs e)\n{\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Notice that in WPF you have to add the class handler as a static method, whereas in Avalonia the class handler is not static: the notification is automatically directed to the correct instance. The ",(0,s.jsx)(n.code,{children:"sender"})," parameter typical of event handlers is not necessary in this case and everything remains strongly typed."]}),"\n",(0,s.jsx)(t,{})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(i,{...e})}):i(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var a=t(96540);const s={},r=a.createContext(s);function l(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:l(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);