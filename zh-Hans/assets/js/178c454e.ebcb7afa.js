"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[8912],{34974:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>a,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"get-started/test-drive/code-with-controls","title":"Code With Controls","description":"In this section, you will implement the core logic to update the Fahrenheit temperature based on the Celsius input.","source":"@site/docs/get-started/test-drive/code-with-controls.md","sourceDirName":"get-started/test-drive","slug":"/get-started/test-drive/code-with-controls","permalink":"/zh-Hans/docs/get-started/test-drive/code-with-controls","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/get-started/test-drive/code-with-controls.md","tags":[],"version":"current","lastUpdatedBy":"202420505","lastUpdatedAt":1755588461000,"frontMatter":{"id":"code-with-controls","title":"Code With Controls"},"sidebar":"documentationSidebar","previous":{"title":"Respond to an Event","permalink":"/zh-Hans/docs/get-started/test-drive/respond-to-an-event"},"next":{"title":"Migrating from WPF","permalink":"/zh-Hans/docs/get-started/wpf/"}}');var i=n(74848),r=n(28453);const o={id:"code-with-controls",title:"Code With Controls"},l=void 0,d={},c=[{value:"Control Names",id:"control-names",level:2},{value:"Get Control Values in Code-Behind",id:"get-control-values-in-code-behind",level:2},{value:"Set Control Values in Code-Behind",id:"set-control-values-in-code-behind",level:2},{value:"Exercises",id:"exercises",level:3}];function h(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.p,{children:"In this section, you will implement the core logic to update the Fahrenheit temperature based on the Celsius input."}),"\n",(0,i.jsx)(t.h2,{id:"control-names",children:"Control Names"}),"\n",(0,i.jsx)(t.p,{children:"Avalonia creates objects for each control defined in the XAML hierarchy. Your code can access these controls at runtime,\nbut should be named for easy access."}),"\n",(0,i.jsx)(t.p,{children:"To add control names, follow this procedure:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Stop the app if it is running."}),"\n",(0,i.jsxs)(t.li,{children:["Locate the ",(0,i.jsx)(t.code,{children:"TextBox"})," for Celsius."]}),"\n",(0,i.jsxs)(t.li,{children:["Add the ",(0,i.jsx)(t.code,{children:"Name"})," attribute like this:"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<TextBox ... Name="Celsius"/>\n'})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Repeat the above for the Fahrenheit input:"}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-xml",children:'<TextBox ... Name="Fahrenheit"/>\n'})}),"\n",(0,i.jsx)(t.h2,{id:"get-control-values-in-code-behind",children:"Get Control Values in Code-Behind"}),"\n",(0,i.jsxs)(t.p,{children:["To access the ",(0,i.jsx)(t.code,{children:"Text"})," value of the ",(0,i.jsx)(t.code,{children:"celsius"})," input, follow this procedure:"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Switch to the ",(0,i.jsx)(t.strong,{children:"MainWindow.axaml.cs"})," code-behind file."]}),"\n",(0,i.jsxs)(t.li,{children:["Locate the ",(0,i.jsx)(t.code,{children:"Button_OnClick"})," event handler."]}),"\n",(0,i.jsxs)(t.li,{children:["Alter the ",(0,i.jsx)(t.code,{children:"Debug"})," statement to display the text property of the ",(0,i.jsx)(t.code,{children:"Celsius"})," input, like this:"]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'Debug.WriteLine($"Click! Celsius={Celsius.Text}");\n'})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Run the app again (in debug mode) to confirm that you can see the value in the Celsius appear in the debug window."}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"set-control-values-in-code-behind",children:"Set Control Values in Code-Behind"}),"\n",(0,i.jsx)(t.p,{children:"To use the simple formula that converts Celsius temperature to Fahrenheit, you will first need to ensure that the\nCelsius input text converts to a number. The formula is then:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"Tf = Tc * (9/5) + 32\n"})}),"\n",(0,i.jsx)(t.p,{children:"To add the conversion formula, follow this procedure:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Locate the ",(0,i.jsx)(t.code,{children:"Button_OnClick"})," event handler."]}),"\n",(0,i.jsx)(t.li,{children:"Validate the Celsius input text as a number."}),"\n",(0,i.jsx)(t.li,{children:"Use the conversion formula."}),"\n",(0,i.jsxs)(t.li,{children:["Update the ",(0,i.jsx)(t.code,{children:"Text"})," in the Fahrenheit input."]}),"\n",(0,i.jsx)(t.li,{children:"Run the app to check your work."}),"\n"]}),"\n",(0,i.jsx)(t.p,{children:"One implementation of the above is as follows:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-csharp",children:'private void Button_OnClick(object? sender, RoutedEventArgs e)\n{\n    if (double.TryParse(Celsius.Text, out double C))\n    {\n        var F = C * (9d / 5d) + 32;\n        Fahrenheit.Text = F.ToString("0.0");\n    }\n    else\n    {\n        Celsius.Text = "0";\n        Fahrenheit.Text = "0";\n    }\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"You can check your work using the following conversion table:"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Celsius"}),(0,i.jsx)(t.th,{children:"Fahrenheit"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"-10"}),(0,i.jsx)(t.td,{children:"14.0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"0"}),(0,i.jsx)(t.td,{children:"32.0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"10"}),(0,i.jsx)(t.td,{children:"50.0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"21"}),(0,i.jsx)(t.td,{children:"69.8"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"25"}),(0,i.jsx)(t.td,{children:"77.0"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:"32"}),(0,i.jsx)(t.td,{children:"89.6"})]})]})]}),"\n",(0,i.jsx)(t.h3,{id:"exercises",children:"Exercises"}),"\n",(0,i.jsx)(t.p,{children:"You have now used an event handler to get and set control properties at runtime. Try some of these exercises:"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:"Stop showing the gridlines (easy)."}),"\n",(0,i.jsxs)(t.li,{children:["Stop the user from changing the text in the Fahrenheit input by setting the ",(0,i.jsx)(t.code,{children:"IsReadOnly"})," attribute (easy)."]}),"\n",(0,i.jsxs)(t.li,{children:["Calculate the conversion as the user types into the Celsius input using the ",(0,i.jsx)(t.code,{children:"TextChanged"})," event (moderate)."]}),"\n"]}),"\n",(0,i.jsx)(t.admonition,{type:"info",children:(0,i.jsxs)(t.p,{children:["For full information about the complete range of Avalonia built-in controls, events and attributes, see the controls reference section ",(0,i.jsx)(t.a,{href:"../../reference/controls/",children:"here"}),"."]})})]})}function a(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var s=n(96540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);