"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[7849],{12001:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"concepts/input/hotkeys","title":"Keyboard and Hotkeys","description":"CONCEPTS - Input","source":"@site/docs/concepts/input/hotkeys.md","sourceDirName":"concepts/input","slug":"/concepts/input/hotkeys","permalink":"/zh-Hans/docs/concepts/input/hotkeys","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/concepts/input/hotkeys.md","tags":[],"version":"current","lastUpdatedBy":"202420505","lastUpdatedAt":1755588461000,"frontMatter":{"description":"CONCEPTS - Input"},"sidebar":"documentationSidebar","previous":{"title":"Gestures","permalink":"/zh-Hans/docs/concepts/input/gestures"},"next":{"title":"KeyBinding and MouseBinding","permalink":"/zh-Hans/docs/concepts/input/binding-key-and-mouse"}}');var o=s(74848),a=s(28453);const i={description:"CONCEPTS - Input"},r="Keyboard and Hotkeys",d={},c=[{value:"Keys and Modifiers",id:"keys-and-modifiers",level:2},{value:"Assign number keys to hotkeys",id:"assign-number-keys-to-hotkeys",level:2},{value:"Reference",id:"reference",level:3},{value:"Source code",id:"source-code",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"keyboard-and-hotkeys",children:"Keyboard and Hotkeys"})}),"\n",(0,o.jsxs)(n.p,{children:["Various Controls that implement ",(0,o.jsx)(n.code,{children:"ICommandSource"})," have a ",(0,o.jsx)(n.code,{children:"HotKey"})," property that you can set or bind to. Pressing the hotkey will execute the command ",(0,o.jsx)(n.a,{href:"../../basics/user-interface/adding-interactivity#commands",children:"bound"})," to the Control."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<Menu>\n    <MenuItem Header="_File">\n        <MenuItem x:Name="SaveMenuItem" Header="_Save" Command="{Binding SaveCommand}" HotKey="Ctrl+S"/>\n    </MenuItem>\n</Menu>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You can also use the static methods of the ",(0,o.jsx)(n.code,{children:"HotKeyManager"})," class to set and get hotkeys from code:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:"InitializeComponent();\nHotKeyManager.SetHotKey(saveMenuItem, new KeyGesture(Key.S, KeyModifiers.Control));\n"})}),"\n",(0,o.jsx)(n.h2,{id:"keys-and-modifiers",children:"Keys and Modifiers"}),"\n",(0,o.jsxs)(n.p,{children:["A Hotkey must have one ",(0,o.jsx)(n.a,{href:"https://api-docs.avaloniaui.net/docs/T_Avalonia_Input_Key",children:"Key"})," and zero or more ",(0,o.jsx)(n.a,{href:"https://api-docs.avaloniaui.net/docs/T_Avalonia_Input_KeyModifiers",children:"KeyModifiers"}),". When setting a Hotkey in XAML using the ",(0,o.jsx)(n.code,{children:"HotKey"})," property, the string will be parsed as a ",(0,o.jsx)(n.a,{href:"https://api-docs.avaloniaui.net/docs/T_Avalonia_Input_KeyGesture",children:"KeyGesture"}),". ",(0,o.jsx)(n.a,{href:"https://docs.microsoft.com/en-us/dotnet/api/system.enum.parse",children:"Enum.Parse"})," is used to parse the key and modifiers but synonyms like ",(0,o.jsx)(n.code,{children:"Ctrl"})," instead of ",(0,o.jsx)(n.code,{children:"Control"})," or ",(0,o.jsx)(n.code,{children:"Win"})," instead of ",(0,o.jsx)(n.code,{children:"Meta"})," can be used."]}),"\n",(0,o.jsx)(n.h2,{id:"assign-number-keys-to-hotkeys",children:"Assign number keys to hotkeys"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["A Hotkey must be use D1..D0 or NumPad1..NumPad0.\nsee: ",(0,o.jsx)(n.a,{href:"https://api-docs.avaloniaui.net/docs/T_Avalonia_Input_Key",children:"Key"})]}),"\n",(0,o.jsx)(n.li,{children:"By binding the same command to two buttons and hiding one button, you can differentiate between a single number on the numpad and a simple Ctrl+number key."}),"\n",(0,o.jsxs)(n.li,{children:["If you want to limit command malfunctions caused by pressing numbers on the numpad, you can also use ",(0,o.jsx)(n.a,{href:"https://api-docs.avaloniaui.net/docs/T_Avalonia_Input_KeyModifiers",children:"KeyModifiers"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'\x3c!--  It\'s worked fine  --\x3e\n\x3c!--  e.g. Ctrl+1  --\x3e\n<Button\n    Command="{Binding CommandX}"\n    Content="[1]"\n    HotKey="Ctrl+D1" />\n\x3c!--  e.g. You can also use Alt+NumPad1  --\x3e\n<Button\n    Command="{Binding CommandX}"\n    HotKey="NumPad1"\n    IsVisible="False" />\n\n\x3c!--  These didn\'t work  --\x3e\n\x3c!--  Alt+Number  --\x3e\n<Button Command="{Binding CommandX}" Content="_1" />\n'})}),"\n",(0,o.jsx)(n.h3,{id:"reference",children:"Reference"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://api-docs.avaloniaui.net/docs/T_Avalonia_Controls_HotKeyManager",children:"HotKeyManager"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://api-docs.avaloniaui.net/docs/T_Avalonia_Input_KeyGesture",children:"KeyGesture"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://api-docs.avaloniaui.net/docs/T_Avalonia_Input_KeyModifiers",children:"KeyModifiers"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://api-docs.avaloniaui.net/docs/T_Avalonia_Input_Key",children:"Key"})}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"source-code",children:"Source code"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Controls/HotkeyManager.cs",children:"HotkeyManager.cs"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"https://github.com/AvaloniaUI/Avalonia/blob/master/src/Avalonia.Input/KeyGesture.cs",children:"KeyGesture.cs"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>r});var t=s(96540);const o={},a=t.createContext(o);function i(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);