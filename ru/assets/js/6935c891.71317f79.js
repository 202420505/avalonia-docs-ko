"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[1843],{74407:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>r,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"tools/dev-tools/tools/metrics","title":"Application Metrics Tool","description":"Metrics are numerical measurements reported over time. They are typically used to monitor the health of an app and generate alerts.","source":"@site/accelerate/tools/dev-tools/tools/metrics.md","sourceDirName":"tools/dev-tools/tools","slug":"/tools/dev-tools/tools/metrics","permalink":"/ru/accelerate/tools/dev-tools/tools/metrics","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/accelerate/tools/dev-tools/tools/metrics.md","tags":[],"version":"current","frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Application Breakpoints Tool","permalink":"/ru/accelerate/tools/dev-tools/tools/breakpoints"},"next":{"title":"Reference to DeveloperToolsOptions","permalink":"/ru/accelerate/tools/dev-tools/advanced/options-reference"}}');var o=s(74848),i=s(28453);const r={},a="Application Metrics Tool",l={},c=[{value:"Disabling/Enabling default sources",id:"disablingenabling-default-sources",level:2},{value:"Writing custom metric sources",id:"writing-custom-metric-sources",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"application-metrics-tool",children:"Application Metrics Tool"})}),"\n",(0,o.jsx)(t.p,{children:"Metrics are numerical measurements reported over time. They are typically used to monitor the health of an app and generate alerts."}),"\n",(0,o.jsx)(t.p,{children:"Meter providers were introduced with .NET 6. More libraries and parts of .NET itself (such as HttpClient) are starting to support it, providing useful diagnostic measurements."}),"\n",(0,o.jsx)(t.p,{children:"There are several main types of metric instruments:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:'Counter - a measurement representing a single value that can only grow. Typically representing "total" values, like total raised exceptions count.'}),"\n",(0,o.jsx)(t.li,{children:"UpDownCounter - similar to Counter, but allowing negative increments. For example, Memory Working Set."}),"\n",(0,o.jsxs)(t.li,{children:["Histogram - distribution of measurements. Frame render or HTTP request duration is an example. ",(0,o.jsx)(t.code,{children:"Developer Tools"})," also displays useful P50 (median), P90 and P95 percentiles for histograms."]}),"\n",(0,o.jsxs)(t.li,{children:["Gauge - a measurement without historical data. Only displays latest value. ",(0,o.jsx)(t.strong,{children:"Note"}),": not supported by ",(0,o.jsx)(t.code,{children:"Developer Tools"})," at the moment."]}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Histogram",src:s(59915).A+"",width:"1091",height:"409"})}),"\n",(0,o.jsx)(t.h2,{id:"disablingenabling-default-sources",children:"Disabling/Enabling default sources"}),"\n",(0,o.jsxs)(t.p,{children:["By default, ",(0,o.jsx)(t.code,{children:"Developer Tools"})," is configured to only accept ",(0,o.jsx)(t.code,{children:"Avalonia"})," and ",(0,o.jsx)(t.code,{children:"System.Runtime"})," meters providers."]}),"\n",(0,o.jsx)(t.p,{children:'It\'s possible to disable them or enable another by clicking "+" button.\nAll instruments are grouped by their meter provider, typically a namespace defining name.'}),"\n",(0,o.jsxs)(t.p,{children:["Keep in mind, this list is dynamic. New instruments are added only when provider has pushed at least single measurement. For example, HttpClient (",(0,o.jsx)(t.code,{children:"System.Http"})," namespace) instruments will be displayed only after the first request."]}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Meters Filter",src:s(19444).A+"",width:"1087",height:"414"})}),"\n",(0,o.jsx)(t.admonition,{type:"note",children:(0,o.jsxs)(t.p,{children:["Note, ",(0,o.jsx)(t.code,{children:"Avalonia"})," meters are available from 11.3.0 version of the framework. And ",(0,o.jsx)(t.code,{children:"System.Runtime"})," only from .NET 9.\nIf your application doesn't meet neither of these two requirements, by default, you will see empty list of meters."]})}),"\n",(0,o.jsx)(t.h2,{id:"writing-custom-metric-sources",children:"Writing custom metric sources"}),"\n",(0,o.jsxs)(t.p,{children:["You can follow .NET ",(0,o.jsx)(t.a,{href:"https://learn.microsoft.com/en-us/dotnet/core/diagnostics/metrics-instrumentation",children:"Creating metrics"})," documentation on how to write custom metric sources which then can be previewed in the ",(0,o.jsx)(t.code,{children:"Developer Tools"})," or the official ",(0,o.jsx)(t.code,{children:"dotnet-counters"})," console tool."]}),"\n",(0,o.jsx)(t.p,{children:"Simplest example can be something of sorts:"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-csharp",children:'static Meter s_meter = new Meter("SimpleToDoList");\nstatic UpDownCounter<int> s_tasksCount = s_meter.CreateUpDownCounter<int>("tasks.count");\nstatic Counter<int> s_tasksResolved = s_meter.CreateCounter<int>("tasks.resolved.total");\n\nprivate void OnTaskAdded() => s_tasksCount.Add(1);\nprivate void OnTaskRemoved() => s_tasksCount.Add(-1);\nprivate void OnTaskResolved() => s_tasksResolved.Add(1);\n'})}),"\n",(0,o.jsxs)(t.p,{children:["Once code has pushed at least one measurement, this ",(0,o.jsx)(t.code,{children:"SimpleToDoList"}),' will be visible in the "+" button flyout to be displayed in the tool.']})]})}function m(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},19444:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/meters-filter-548daab9fbaf12f9164059b7be9d0001.png"},59915:(e,t,s)=>{s.d(t,{A:()=>n});const n=s.p+"assets/images/metrics-histogram-12f3d5128f59e84e936a83e44ec98590.png"},28453:(e,t,s)=>{s.d(t,{R:()=>r,x:()=>a});var n=s(96540);const o={},i=n.createContext(o);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);