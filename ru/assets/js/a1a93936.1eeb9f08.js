"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[2876],{85296:(e,o,n)=>{n.r(o),n.d(o,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"tools/dev-tools/tools/logs","title":"Application Logs Tool","description":"Viewing Avalonia Logs in the tool","source":"@site/accelerate/tools/dev-tools/tools/logs.md","sourceDirName":"tools/dev-tools/tools","slug":"/tools/dev-tools/tools/logs","permalink":"/ru/accelerate/tools/dev-tools/tools/logs","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/accelerate/tools/dev-tools/tools/logs.md","tags":[],"version":"current","frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"Application Resources Tool","permalink":"/ru/accelerate/tools/dev-tools/tools/resources"},"next":{"title":"Application Events Tool","permalink":"/ru/accelerate/tools/dev-tools/tools/events"}}');var t=n(74848),i=n(28453);const s={},l="Application Logs Tool",a={},c=[{value:"Viewing Avalonia Logs in the tool",id:"viewing-avalonia-logs-in-the-tool",level:2},{value:"Enabling Microsoft.Extensions.Logging integration",id:"enabling-microsoftextensionslogging-integration",level:2},{value:"Attaching custom log source",id:"attaching-custom-log-source",level:2}];function g(e){const o={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components},{Details:r}=o;return r||function(e,o){throw new Error("Expected "+(o?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(o.header,{children:(0,t.jsx)(o.h1,{id:"application-logs-tool",children:"Application Logs Tool"})}),"\n",(0,t.jsx)(o.h2,{id:"viewing-avalonia-logs-in-the-tool",children:"Viewing Avalonia Logs in the tool"}),"\n",(0,t.jsxs)(o.p,{children:["By default ",(0,t.jsx)(o.code,{children:"Avalonia"})," Warnings and Errors are automatically recorded by ",(0,t.jsx)(o.code,{children:"Developer Tools"}),"."]}),"\n",(0,t.jsx)(o.p,{children:"Main features include:"}),"\n",(0,t.jsxs)(o.ol,{children:["\n",(0,t.jsx)(o.li,{children:"Combined message in the data table."}),"\n",(0,t.jsx)(o.li,{children:"Filtering by verbosity, message and parameters."}),"\n",(0,t.jsx)(o.li,{children:"Display of each arguments independently."}),"\n",(0,t.jsxs)(o.li,{children:["If log entry ",(0,t.jsx)(o.code,{children:"Source"})," is an visual element attached to the elements tree, it can be clicked to navigate to this element inside of ",(0,t.jsx)(o.code,{children:"Developer Tools"})]}),"\n",(0,t.jsx)(o.li,{children:"Integration with third party loggers."}),"\n"]}),"\n",(0,t.jsx)(o.p,{children:(0,t.jsx)(o.img,{alt:"Logs Tool with Avalonia warnings",src:n(38203).A+"",width:"1395",height:"414"})}),"\n",(0,t.jsx)(o.h2,{id:"enabling-microsoftextensionslogging-integration",children:"Enabling Microsoft.Extensions.Logging integration"}),"\n",(0,t.jsxs)(o.p,{children:["By default, only ",(0,t.jsx)(o.code,{children:"Avalonia"})," logs are redirected to the ",(0,t.jsx)(o.code,{children:"Developer Tools"})," process.\n",(0,t.jsx)(o.code,{children:"Diagnostics Support"})," library includes built-in integration with Microsoft logging abstractions which can be easily enabled."]}),"\n",(0,t.jsxs)(o.p,{children:["To do so, ",(0,t.jsx)(o.code,{children:"LoggerFactory"})," needs to be created as normally. Returned object can be passed to ",(0,t.jsx)(o.code,{children:"DevToolsLoggerCollector.WithMicrosoftLogger(ILoggerFactory)"})," method."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-csharp",children:"public override void Initialize()\n{\n    AvaloniaXamlLoader.Load(this);\n\n    var loggerFactory = LoggerFactory.Create(b => b\n        .SetMinimumLevel(LogLevel.Information)\n        .AddConsole());\n\n    this.AttachDeveloperTools(o =>\n    {\n        o.AddMicrosoftLoggerObservable(loggerFactory);\n    });\n\n    Logger = loggerFactory.CreateLogger<Application>();\n}\n"})}),"\n",(0,t.jsxs)(o.p,{children:["For MS Dependency Injection solutions, ",(0,t.jsx)(o.code,{children:"ILoggerFactory"})," interfaces can be stored and retrieved from the ",(0,t.jsx)(o.code,{children:"ServiceCollection"}),"."]}),"\n",(0,t.jsxs)(o.p,{children:["You can find more details about ",(0,t.jsx)(o.code,{children:"DeveloperToolsOptions"})," on ",(0,t.jsx)(o.a,{href:"/ru/accelerate/tools/dev-tools/advanced/options-reference",children:"Reference to DeveloperToolsOptions"})," page."]}),"\n",(0,t.jsx)(o.h2,{id:"attaching-custom-log-source",children:"Attaching custom log source"}),"\n",(0,t.jsx)(o.p,{children:(0,t.jsx)(o.img,{alt:"Logs Tool with custom Serilog events",src:n(94194).A+"",width:"1115",height:"414"})}),"\n",(0,t.jsxs)(o.p,{children:["Let's create a ",(0,t.jsx)(o.code,{children:"Serilog"})," sink as an example, that is configured to redirect logs into ",(0,t.jsx)(o.code,{children:"Developer Tools"}),"."]}),"\n",(0,t.jsxs)(o.p,{children:["According to ",(0,t.jsx)(o.code,{children:"Serilog"})," ",(0,t.jsx)(o.a,{href:"https://github.com/serilog/serilog/wiki/Developing-a-sink",children:"Developing a sink"})," documentation it's necessary to implement a simple ",(0,t.jsx)(o.code,{children:"ILogEventSink"})," interface. Together with ",(0,t.jsx)(o.code,{children:"ILoggerObservable"}),", which is necessary to connect it with ",(0,t.jsx)(o.code,{children:"Developer Tools"}),":"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-csharp",children:'public class DevToolsSerilogSink(string logArea = "Serilog") : ILogEventSink, ILoggerObservable\n{\n}\n'})}),"\n",(0,t.jsxs)(o.p,{children:["Start with implementing ",(0,t.jsx)(o.code,{children:"ILoggerObservable.Subscribe"})," by recording a list of observers. ",(0,t.jsx)(o.code,{children:"ILoggerObserver"})," has only two methods: ",(0,t.jsx)(o.code,{children:"IsEnabled"})," and ",(0,t.jsx)(o.code,{children:"Log"}),", both of which are going to be used in this sample. Return value is a disposable that will get called once DevTools is disconnecting."]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-csharp",children:"private readonly LinkedList<ILoggerObserver> _observers = [];\n\npublic IDisposable Subscribe(ILoggerObserver observer)\n{\n    _observers.AddLast(observer);\n    return Disposable.Create(() => _observers.Remove(observer));\n}\n"})}),"\n",(0,t.jsxs)(o.p,{children:["And ",(0,t.jsx)(o.code,{children:"ILogEventSink.Emit"})," implementation has to convert Serilog log event into parameters compatible with ",(0,t.jsx)(o.code,{children:"ILoggerObserver"}),":"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-csharp",children:"public void Emit(LogEvent logEvent)\n{\n    var logLevel = logEvent.Level switch\n    {\n        LogEventLevel.Verbose => LogEntryVerbosity.Verbose,\n        LogEventLevel.Debug => LogEntryVerbosity.Debug,\n        LogEventLevel.Information => LogEntryVerbosity.Information,\n        LogEventLevel.Warning => LogEntryVerbosity.Warning,\n        LogEventLevel.Error => LogEntryVerbosity.Error,\n        LogEventLevel.Fatal => LogEntryVerbosity.Fatal,\n        _ => throw new ArgumentOutOfRangeException()\n    };\n\n    // Map each parameter into a strings array:\n    var parameters = new string[logEvent.Properties.Count];\n    var paramIndex = 0;\n    foreach (var value in logEvent.Properties.Values)\n    {\n        parameters[paramIndex++] = value.ToString(null, formatProvider);\n    }\n\n    foreach (var observer in _observers)\n    {\n        // `Developer Tools` might disable specific logging areas, so we need to check them first.\n        if (observer.IsEnabled(logLevel, logArea))\n        {\n            // Queue log entry with our parameters.\n            observer.Log(logLevel, logArea, null, logEvent.MessageTemplate.Text, logEvent.Exception, parameters);\n        }\n    }\n}\n"})}),"\n",(0,t.jsxs)(o.p,{children:["With both interfaces it's now possible to configure both ",(0,t.jsx)(o.code,{children:"Serilog"})," and ",(0,t.jsx)(o.code,{children:"Developer Tools"})," together in ",(0,t.jsx)(o.code,{children:"Application.Initialize"})," method:"]}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-csharp",children:"public override void Initialize()\n{\n    AvaloniaXamlLoader.Load(this);\n\n    var sink = new SerilogSink();\n\n    Logger = new LoggerConfiguration()\n        .MinimumLevel.Information()\n        .WriteTo.Sink(sink)\n        .CreateLogger();\n\n    this.AttachDeveloperTools(o =>\n    {\n        o.AddLoggerObservable(sink);\n    });\n}\n"})}),"\n",(0,t.jsx)(o.p,{children:"And then use it somewhere in the code:"}),"\n",(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-csharp",children:'private int _clickTimes = 0;\nprivate void Button_OnClick(object? sender, RoutedEventArgs e)\n{\n    _clickTimes++;\n    App.Logger!.Information("Button was clicked {Times} times", _clickTimes);\n}\n'})}),"\n",(0,t.jsxs)(r,{children:[(0,t.jsx)("summary",{children:"Full listing of DevToolsSerilogSink class"}),(0,t.jsx)(o.pre,{children:(0,t.jsx)(o.code,{className:"language-csharp",children:'public class DevToolsSerilogSink(string logArea = "Serilog", IFormatProvider? formatProvider = null)\n    : ILogEventSink, ILoggerObservable\n{\n    private readonly LinkedList<ILoggerObserver> _observers = [];\n\n    public IDisposable Subscribe(ILoggerObserver observer)\n    {\n        _observers.AddLast(observer);\n        return Disposable.Create(() => _observers.Remove(observer));\n    }\n\n    public void Emit(LogEvent logEvent)\n    {\n        var logLevel = logEvent.Level switch\n        {\n            LogEventLevel.Verbose => LogEntryVerbosity.Verbose,\n            LogEventLevel.Debug => LogEntryVerbosity.Debug,\n            LogEventLevel.Information => LogEntryVerbosity.Information,\n            LogEventLevel.Warning => LogEntryVerbosity.Warning,\n            LogEventLevel.Error => LogEntryVerbosity.Error,\n            LogEventLevel.Fatal => LogEntryVerbosity.Fatal,\n            _ => throw new ArgumentOutOfRangeException()\n        };\n\n        var parameters = new string[logEvent.Properties.Count];\n        var paramIndex = 0;\n        foreach (var value in logEvent.Properties.Values)\n        {\n            parameters[paramIndex++] = value.ToString(null, formatProvider);\n        }\n\n        foreach (var observer in _observers)\n        {\n            if (observer.IsEnabled(logLevel, logArea))\n            {\n                observer.Log(logLevel, logArea, null, logEvent.MessageTemplate.Text, logEvent.Exception, parameters);\n            }\n        }\n    }\n}\n'})})]})]})}function d(e={}){const{wrapper:o}={...(0,i.R)(),...e.components};return o?(0,t.jsx)(o,{...e,children:(0,t.jsx)(g,{...e})}):g(e)}},38203:(e,o,n)=>{n.d(o,{A:()=>r});const r=n.p+"assets/images/logs-avalonia-list-247c475e75d47a35444f4e9e941142fe.png"},94194:(e,o,n)=>{n.d(o,{A:()=>r});const r=n.p+"assets/images/logs-custom-serilog-3dd6d2a39d4aea64cf51d04188fae444.png"},28453:(e,o,n)=>{n.d(o,{R:()=>s,x:()=>l});var r=n(96540);const t={},i=r.createContext(t);function s(e){const o=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function l(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(i.Provider,{value:o},e.children)}}}]);