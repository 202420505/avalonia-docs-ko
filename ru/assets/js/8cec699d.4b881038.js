"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[6676],{83370:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"components/webview/interop/native-browser-interop","title":"Native Browser interop","description":"Overview","source":"@site/accelerate/components/webview/interop/native-browser-interop.md","sourceDirName":"components/webview/interop","slug":"/components/webview/interop/native-browser-interop","permalink":"/ru/accelerate/components/webview/interop/native-browser-interop","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/accelerate/components/webview/interop/native-browser-interop.md","tags":[],"version":"current","frontMatter":{},"sidebar":"documentationSidebar","previous":{"title":"WebView Environment Options","permalink":"/ru/accelerate/components/webview/interop/environment-options"}}');var t=i(74848),o=i(28453);const s={},a="Native Browser interop",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Getting handle",id:"getting-handle",level:2},{value:"For WebView Controls",id:"for-webview-controls",level:3},{value:"For WebView Dialogs",id:"for-webview-dialogs",level:3},{value:"Interop",id:"interop",level:2},{value:"Windows",id:"windows",level:3},{value:"MacOS/iOS",id:"macosios",level:3},{value:"GTK Linux",id:"gtk-linux",level:3},{value:"Android",id:"android",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"native-browser-interop",children:"Native Browser interop"})}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"The Avalonia WebView component provides cross-platform web content rendering capabilities by utilizing native platform web view.\nHowever, sometimes you need to access platform-specific APIs that aren't exposed through the Avalonia WebView abstraction layer."}),"\n",(0,t.jsx)(n.p,{children:"This document explains how to obtain native handles and perform interop with the underlying browser implementations on each supported platform."}),"\n",(0,t.jsx)(n.h2,{id:"getting-handle",children:"Getting handle"}),"\n",(0,t.jsx)(n.p,{children:"To access native browser functionality, you first need to obtain the platform-specific handle from your WebView control."}),"\n",(0,t.jsx)(n.h3,{id:"for-webview-controls",children:"For WebView Controls"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"TryGetPlatformHandle()"})," method on your WebView instance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"if (myWebView.TryGetPlatformHandle() is IWindowsWebView2PlatformHandle handle)\n{\n    // Cast to platform-specific interface and use\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"for-webview-dialogs",children:"For WebView Dialogs"}),"\n",(0,t.jsxs)(n.p,{children:["Use the ",(0,t.jsx)(n.code,{children:"TryGetWebViewPlatformHandle()"})," method on your WebView dialog instance:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"if (myWebViewDialog.TryGetWebViewPlatformHandle() is IWindowsWebView2PlatformHandle handle)\n{\n    // Cast to platform-specific interface and use\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"interop",children:"Interop"}),"\n",(0,t.jsx)(n.h3,{id:"windows",children:"Windows"}),"\n",(0,t.jsx)(n.p,{children:"Avalonia's WebView on Windows supports two adapters:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"WebView2"}),": Modern Chromium-based Edge (recommended)"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"WebView1"}),": Legacy Edge (fallback for older Windows 10 installations without WebView2)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Both adapters operate with classic COM interop.\n",(0,t.jsx)(n.em,{children:"IDL"})," definition files can be found in the ",(0,t.jsx)(n.code,{children:"Microsoft.Web.WebView2"})," nuget package (in case of WebView2), Windows SDK (in case of WebView1) or on the internet."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Recommended Approach"}),": Use the new ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/native-interop/comwrappers-source-generation",children:(0,t.jsx)(n.code,{children:"[GeneratedComInterface]"})})," attribute for fast, trimmer/AOT-friendly COM interop."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Alternative Solutions"}),":"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://github.com/microsoft/CsWin32",children:"CsWin32 generators"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsxs)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/standard/native-interop/cominterop",children:["Legacy ",(0,t.jsx)(n.code,{children:"[ComImport]"})]})}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public interface IWindowsWebView2PlatformHandle : IPlatformHandle\n{\n    /// Returns COM handle to the ICoreWebView2 [76ECEACB-0462-4D94-AC83-423A6793775E] COM interface\n    IntPtr CoreWebView2 { get; }\n    /// Returns COM handle to the ICoreWebView2 [4D00C0D1-9434-4EB6-8078-8697A560334F] COM interface\n    IntPtr CoreWebView2Controller { get; }\n}\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public interface IWindowsWebView1PlatformHandle : IPlatformHandle\n{\n    /// Returns COM handle to the IWebViewControl [3F921316-BC70-4BDA-9136-C94370899FAB] COM interface.\n    IntPtr WebViewControl { get; }\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"macosios",children:"MacOS/iOS"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Recommended Approach"}),": Use official .NET Xamarin.Native macOS/iOS bindings for strongly-typed wrappers. Typically using ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/objcruntime.runtime.getnsobject?view=xamarin-ios-sdk-12#objcruntime-runtime-getnsobject-1(system-intptr-system-boolean)",children:"NSObject.GetNSObject<WKWebView>(IntPtr, false)"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"var wkWebView = NSObject.GetNSObject<WKWebView>(handle.WKWebView, false);\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Alternative"}),": Use ",(0,t.jsx)(n.code,{children:"objc_msgSend"})," P/Invokes for direct native API access (more control but harder to maintain)."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public interface IAppleWKWebViewPlatformHandle : IPlatformHandle\n{\n    IntPtr WKWebView { get; }\n    IntPtr GetWKWebViewRetained();\n}\n"})}),"\n",(0,t.jsx)(n.h3,{id:"gtk-linux",children:"GTK Linux"}),"\n",(0,t.jsx)(n.p,{children:"GTK interop provides direct access to WebKitWebView but requires careful thread synchronization."}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Important"}),": All GTK calls must be executed on the GTK thread. Use ",(0,t.jsx)(n.a,{href:"https://api-docs.avaloniaui.net/docs/M_Avalonia_X11_Interop_GtkInteropHelper_RunOnGlibThread__1",children:(0,t.jsx)(n.code,{children:"GtkInteropHelper.RunOnGlibThread"})})," from the ",(0,t.jsx)(n.code,{children:"Avalonia.X11"})," assembly (included with ",(0,t.jsx)(n.code,{children:"Avalonia.Desktop"}),")."]}),"\n",(0,t.jsxs)(n.p,{children:["The provided ",(0,t.jsx)(n.code,{children:"WebKitWebView"})," IntPtr can be used directly with WebKit P/Invokes from the ",(0,t.jsx)(n.a,{href:"https://webkitgtk.org/reference/webkit2gtk/2.5.1/WebKitWebView.html",children:"official WebKit reference"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public interface IGtkWebViewPlatformHandle : IPlatformHandle\n{\n    IntPtr WebKitWebView { get; }\n}\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Example Usage"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"GtkInteropHelper.RunOnGlibThread(() =>\n{\n    // Your WebKit P/Invoke calls here\n});\n"})}),"\n",(0,t.jsx)(n.h3,{id:"android",children:"Android"}),"\n",(0,t.jsx)(n.p,{children:"Use official .NET Xamarin.Android bindings for the easiest managed wrapper access."}),"\n",(0,t.jsxs)(n.p,{children:["Refer to the ",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/dotnet/api/android.webkit.webview.-ctor?view=net-android-35.0#android-webkit-webview-ctor(system-intptr-android-runtime-jnihandleownership)",children:"Android.Webkit.WebView documentation"})," for usage details."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-csharp",children:"public interface IAndroidWebViewPlatformHandle : IPlatformHandle\n{\n    IntPtr WebKitWebView { get; }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>a});var r=i(96540);const t={},o=r.createContext(t);function s(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);