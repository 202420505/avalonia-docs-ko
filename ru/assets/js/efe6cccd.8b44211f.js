"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[8680],{42880:(n,t,e)=>{e.r(t),e.d(t,{assets:()=>s,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"third-party-libraries","title":"Third party libraries","description":"Avalonia XPF implements WPF\'s API surface, however a variety of third party libraries also depend on various win32 APIs which are obviously not available cross-platform.","source":"@site/xpf/third-party-libraries.md","sourceDirName":".","slug":"/third-party-libraries","permalink":"/ru/xpf/third-party-libraries","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/xpf/third-party-libraries.md","tags":[],"version":"current","frontMatter":{"id":"third-party-libraries","title":"Third party libraries"},"sidebar":"documentationSidebar","previous":{"title":"XPF Versioning","permalink":"/ru/xpf/build-feeds"},"next":{"title":"Missing features","permalink":"/ru/xpf/missing-features"}}');var r=e(74848),a=e(28453);const o={id:"third-party-libraries",title:"Third party libraries"},d=void 0,s={},l=[{value:"Compatibility Database",id:"compatibility-database",level:2},{value:"Compatibility Notes",id:"compatibility-notes",level:3},{value:"WinAPI Shim APIs",id:"winapi-shim-apis",level:2},{value:"Window Management",id:"window-management",level:3},{value:"Window Creation and Manipulation",id:"window-creation-and-manipulation",level:4},{value:"Focus and Input Management",id:"focus-and-input-management",level:4},{value:"Graphics and Device Context",id:"graphics-and-device-context",level:3},{value:"Device Context Management",id:"device-context-management",level:4},{value:"Region and Drawing Objects",id:"region-and-drawing-objects",level:4},{value:"Coordinate System and Mapping",id:"coordinate-system-and-mapping",level:4},{value:"Desktop Window Manager (DWM)",id:"desktop-window-manager-dwm",level:3},{value:"Monitor and Display",id:"monitor-and-display",level:3},{value:"Input Method Editor (IME)",id:"input-method-editor-ime",level:3},{value:"System Information and Settings",id:"system-information-and-settings",level:3},{value:"Messages and Window Procedures",id:"messages-and-window-procedures",level:3},{value:"Hooks and Thread Management",id:"hooks-and-thread-management",level:3},{value:"File and Resource Management",id:"file-and-resource-management",level:3},{value:"UI Elements and Theming",id:"ui-elements-and-theming",level:3},{value:"Shell and Icons",id:"shell-and-icons",level:3},{value:"Memory Operations",id:"memory-operations",level:3},{value:"Text Services",id:"text-services",level:3},{value:"Notes",id:"notes",level:3},{value:"Usage Example",id:"usage-example",level:3}];function c(n){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"Avalonia XPF implements WPF's API surface, however a variety of third party libraries also depend on various win32 APIs which are obviously not available cross-platform."}),"\n",(0,r.jsx)(t.p,{children:"To deal with this problem, Avalonia XPF implements a win32 API emulation layer that allows 3rd party libraries to work on non-windows platforms. This emulation layer needs to be enabled explictly in your XPF application."}),"\n",(0,r.jsxs)(t.p,{children:["This feature must be enabled before any assembly attempts to call a win32 API, so the constructor of your ",(0,r.jsx)(t.code,{children:"App"})," class or ",(0,r.jsx)(t.code,{children:"Program.Main"})," is a good place to enable it."]}),"\n",(0,r.jsx)(t.p,{children:"To enable win32 API emulation application-wide you can add the following call:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"  AvaloniaUI.Xpf.WinApiShim.WinApiShimSetup.AutoEnable();\n"})}),"\n",(0,r.jsx)(t.p,{children:"You can exclude libraries that are known to provide non-windows platform support like this:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:'AvaloniaUI.Xpf.WinApiShim.WinApiShimSetup.\n  .AutoEnable(asm =>\n  {\n    var name = asm.GetName().Name.ToLowerInvariant();\n    if (name is "sqlite" or "jint" or "esprima" or "magick.net" or "magick.net.core")\n      return true;\n    return false;\n  });\n'})}),"\n",(0,r.jsx)(t.p,{children:"Alternatively the layer can be enabled on per-library basis:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:"AvaloniaUI.Xpf.WinApiShim.WinApiShimSetup\n  .AddLibrary(typeof(Type.In.Third.Party.Library).Assembly);\n"})}),"\n",(0,r.jsx)(t.h2,{id:"compatibility-database",children:"Compatibility Database"}),"\n",(0,r.jsxs)(t.p,{children:["We maintain a comprehensive ",(0,r.jsx)(t.a,{href:"https://avaloniaui.net/xpf/packages",children:"compatibility database"})," for third-party controls. This database provides up-to-date status information for controls from major vendors."]}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsx)(t.mdxAdmonitionTitle,{}),(0,r.jsxs)(t.p,{children:["If you find that a control marked as ",(0,r.jsx)(t.code,{children:"Fix In Progress"})," or ",(0,r.jsx)(t.code,{children:"Untested"})," is mission-critical for your application, please contact our support team. We're committed to working with you to ensure compatibility."]})]}),"\n",(0,r.jsx)(t.h3,{id:"compatibility-notes",children:"Compatibility Notes"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Pure WPF Controls"}),": Third-party controls that are implemented purely in WPF typically work without any issues, even if not listed in our compatibility database."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Unlisted Vendors"}),": The absence of a control vendor from our database doesn't indicate incompatibility. We encourage you to test any controls you need."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Known Challenges"}),": Issues most commonly arise with controls that utilize GDI or WinForms components."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"winapi-shim-apis",children:"WinAPI Shim APIs"}),"\n",(0,r.jsx)(t.p,{children:"Below is an overview of the Windows API (WinAPI) shims available in Avalonia XPF. These shims allow for native Windows functionality while maintaining cross-platform compatibility. Some APIs may not be fully implemented."}),"\n",(0,r.jsx)(t.h3,{id:"window-management",children:"Window Management"}),"\n",(0,r.jsx)(t.h4,{id:"window-creation-and-manipulation",children:"Window Creation and Manipulation"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"// Window Creation\nIntPtr CreateWindowEx(uint dwExStyle, void* lpClassName, void* lpWindowName, uint dwStyle, \n    int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, \n    IntPtr hInstance, IntPtr lpParam);\nIntPtr CreateWindowExW(uint dwExStyle, void* lpClassName, void* lpWindowName, uint dwStyle, \n    int x, int y, int nWidth, int nHeight, IntPtr hWndParent, IntPtr hMenu, \n    IntPtr hInstance, IntPtr lpParam);\nshort RegisterClass(void* wc);\nshort RegisterClassExW(WNDCLASSEX* lpwcx);\n\n// Window State and Properties\nint GetWindowPlacement(IntPtr hWnd, IntPtr lpwndpl);\nint GetWindowRect(IntPtr hWnd, RECT* lpRect);\nint GetClientRect(IntPtr hWnd, RECT* lpRect);\nint IsWindowEnabled(IntPtr hWnd);\nint IsWindowVisible(IntPtr hWnd);\nint IsWindow(IntPtr hWnd);\nint GetWindowInfo(IntPtr hwnd, WINDOWINFO* pwi);\n\n// Window Position and Layout\nIntPtr BeginDeferWindowPos(int nNumWindows);\nint EndDeferWindowPos(IntPtr hWinPosInfo);\nint SetWindowPos(IntPtr hWnd, IntPtr hWndInsertAfter, int x, int y, int cx, int cy, int uFlags);\nuint AdjustWindowRectEx(RECT* lpRect, uint dwStyle, uint bMenu, uint dwExStyle);\n\n// Window Properties\nint GetWindowLong(IntPtr hWnd, int nIndex);\nint SetWindowLong(IntPtr hWnd, int nIndex, int newVal);\nIntPtr GetWindowLongPtr(IntPtr hWnd, int nIndex);\nIntPtr GetWindowLongPtrW(IntPtr hWnd, int nIndex);\nIntPtr SetWindowLongPtr(IntPtr hWnd, int nIndex, IntPtr newVal);\n\n// Window Hierarchy and Relations\nIntPtr GetActiveWindow();\nIntPtr GetTopWindow(IntPtr hWnd);\nIntPtr GetWindow(IntPtr hWnd, uint uCmd);\nIntPtr GetDesktopWindow();\nIntPtr WindowFromPoint(long p);\nIntPtr FindWindow(void* lpClassName, void* lpWindowName);\nint EnumChildWindows(IntPtr window, IntPtr callback, IntPtr lParam);\n\n// Window Display and Region\nint SetWindowDisplayAffinity(IntPtr hWnd, int* dwAffinity);\nint SetWindowRgn(IntPtr hWnd, IntPtr hRgn, int bRedraw);\nint RedrawWindow(IntPtr hWnd, RECT* lprcUpdate, IntPtr hrgnUpdate, uint flags);\nint InvalidateRect(IntPtr hWnd, RECT* lpRect, int bErase);\n\n// System Menu\nIntPtr GetSystemMenu(IntPtr hWnd, int bRevert);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"focus-and-input-management",children:"Focus and Input Management"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IntPtr GetFocus();\nIntPtr GetCapture();\nint ReleaseCapture();\nint SetForegroundWindow(IntPtr hWnd);\nshort GetKeyState(int vKey);\nint GetMessagePos();\nint GetMessageTime();\nint GetCursorPos(POINT* lpPoint);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"graphics-and-device-context",children:"Graphics and Device Context"}),"\n",(0,r.jsx)(t.h4,{id:"device-context-management",children:"Device Context Management"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IntPtr GetDC(IntPtr hWnd);\nIntPtr CreateCompatibleDC(IntPtr hdc);\nint DeleteDC(IntPtr hdc);\nint GetDeviceCaps(IntPtr hdc, int nIndex);\nint ReleaseDC(IntPtr hWnd, IntPtr hDC);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"region-and-drawing-objects",children:"Region and Drawing Objects"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IntPtr CreateRectRgn(int x1, int y1, int x2, int y2);\nIntPtr CreateRoundRectRgn(int x1, int y1, int x2, int y2, int cx, int cy);\nIntPtr CreateRectRgnIndirect(RECT* lprc);\nint DeleteObject(IntPtr obj);\nIntPtr GetStockObject(int i);\n"})}),"\n",(0,r.jsx)(t.h4,{id:"coordinate-system-and-mapping",children:"Coordinate System and Mapping"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"int GetMapMode(IntPtr hdc);\nint SetMapMode(IntPtr hdc, int fnMapMode);\nint SetWindowExtEx(IntPtr hdc, int x, int y, SIZE* lpsz);\nint SetViewportExtEx(IntPtr hdc, int x, int y, SIZE* lpsz);\nint OffsetRect(IntPtr lprc, int x, int y);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"desktop-window-manager-dwm",children:"Desktop Window Manager (DWM)"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"int DwmIsCompositionEnabled(int* enabled);\nint DwmExtendFrameIntoClientArea(IntPtr hWnd, MARGINS* pMarInset);\nuint DwmGetWindowAttribute(IntPtr hwnd, int attribute, uint* pvAttribute, uint cbAttribute);\nuint DwmSetWindowAttribute(IntPtr hwnd, int attribute, uint* pvAttribute, uint cbAttribute);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"monitor-and-display",children:"Monitor and Display"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IntPtr MonitorFromPoint(long point, uint dwFlags);\nIntPtr MonitorFromRect(IntPtr lprc, uint dwFlags);\nIntPtr MonitorFromWindow(IntPtr handle, uint flags);\nint GetMonitorInfo(IntPtr hMonitor, IntPtr lpmi);\nint EnumDisplayMonitors(IntPtr hdc, IntPtr lprcClip, IntPtr lpfnEnum, IntPtr data);\nint GetDpiForMonitor(IntPtr hMonitor, int dpiType, uint* dpiX, uint* dpiY);\nint GetDpiForWindow(IntPtr hWnd);\nint GetProcessDpiAwareness(IntPtr hWnd, int* value);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"input-method-editor-ime",children:"Input Method Editor (IME)"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IntPtr ImmCreateContext();\nint ImmDestroyContext(IntPtr hIMC);\nIntPtr ImmGetContext(IntPtr hWnd);\nint ImmReleaseContext(IntPtr hWnd, IntPtr hIMC);\nIntPtr ImmAssociateContext(IntPtr hWnd, IntPtr hIMC);\nint ImmSetOpenStatus(IntPtr hIMC, int open);\nint ImmGetOpenStatus(IntPtr hIMC);\nint ImmNotifyIME(IntPtr hIMC, int dwAction, int dwIndex, int dwValue);\nint ImmGetProperty(IntPtr hkl, int flags);\nint ImmGetCompositionString(IntPtr hIMC, int dwIndex, void* lpBuf, int dwBufLen);\nint ImmGetCompositionStringW(IntPtr hIMC, int dwIndex, void* lpBuf, int dwBufLen);\nint ImmSetCompositionFont(IntPtr hIMC, void* lf);\nint ImmSetCompositionFontW(IntPtr hIMC, void* lf);\nint ImmConfigureIMEW(IntPtr hkl, IntPtr hwnd, int dwData, void* registerWord);\nint ImmSetCompositionWindow(IntPtr hIMC, void* compform);\nint ImmSetCandidateWindow(IntPtr hIMC, void* candform);\nIntPtr ImmGetDefaultIMEWnd(IntPtr hwnd);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"system-information-and-settings",children:"System Information and Settings"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"int GetSysColor(int nIndex);\nint SystemParametersInfo(uint uiAction, uint uiParam, void* pvParam, uint fWinIni);\nint SystemParametersInfoW(uint uiAction, uint uiParam, void* pvParam, uint fWinIni);\nuint GetDoubleClickTime();\nint GetSystemMetrics(int index);\nint RtlGetVersion(RTL_OSVERSIONINFOW* lpVersionInformation);\nuint GetCaretBlinkTime();\n"})}),"\n",(0,r.jsx)(t.h3,{id:"messages-and-window-procedures",children:"Messages and Window Procedures"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IntPtr SendMessage(IntPtr hWnd, int uMsg, IntPtr wParam, IntPtr lParam);\nint PostMessage(IntPtr hWnd, int uMsg, IntPtr wParam, IntPtr lParam);\nIntPtr DefWindowProc(IntPtr hWnd, uint msg, IntPtr wParam, IntPtr lParam);\nIntPtr DefWindowProcW(IntPtr hWnd, uint msg, IntPtr wParam, IntPtr lParam);\nuint FormatMessageW(int dwFlags, IntPtr lpSource, int dwMessageId, int dwLanguageId, \n    IntPtr* lpBuffer, int nSize, IntPtr Arguments);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"hooks-and-thread-management",children:"Hooks and Thread Management"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IntPtr SetWindowsHookEx(int idHook, IntPtr lpfn, IntPtr hMod, uint dwThreadId);\nint UnhookWindowsHookEx(IntPtr hWnd);\nint GetCurrentThreadId();\nint EnumThreadWindows(int dwThreadId, IntPtr lpfn, IntPtr lParam);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"file-and-resource-management",children:"File and Resource Management"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"IntPtr LoadLibrary(void* lpLib);\nIntPtr LoadLibraryW(void* lpLib);\nint LoadString(IntPtr hInstance, uint uID, void* lpBuffer, int cchBufferMax);\nint LoadStringW(IntPtr hInstance, uint uID, void* lpBuffer, int cchBufferMax);\nIntPtr CreateFileMapping(IntPtr hFile, IntPtr lpFileMappingAttributes, uint flProtect, \n    uint dwMaximumSizeHigh, uint dwMaximumSizeLow, char* lpName);\nIntPtr MapViewOfFile(IntPtr hFileMappingObject, uint dwDesiredAccess, uint dwFileOffsetHigh, \n    uint dwFileOffsetLow, IntPtr dwNumberOfBytesToMap);\nint UnmapViewOfFile(IntPtr lpBaseAddress);\nint CloseHandle(IntPtr hObject);\nIntPtr FindFirstFile(char* lpFilename, IntPtr findData);\nint FindNextFile(IntPtr findHandle, IntPtr findData);\nint FindClose(IntPtr findHandle);\nint GetModuleFileName(IntPtr module, char* lpFilename, int nSize);\nIntPtr GetModuleHandle(char* lpModuleName);\nIntPtr GetModuleHandleW(char* lpModuleName);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"ui-elements-and-theming",children:"UI Elements and Theming"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"// Caret\nint CreateCaret(IntPtr hWnd, IntPtr hBitmap, int width, int height);\nint ShowCaret(IntPtr hWnd);\nint HideCaret(IntPtr hWnd);\nint DestroyCaret();\nint SetCaretPos(int x, int y);\n\n// Menus\nuint TrackPopupMenuEx(IntPtr hmenu, uint fuFlags, int x, int y, IntPtr hwnd, IntPtr lptpm);\nint EnableMenuItem(IntPtr hMenu, int uIDEnableItem, int uEnable);\n\n// Theming\nint IsThemeActive();\nint SetWindowThemeAttribute(IntPtr hWnd, uint wtype, WTA_OPTIONS* attributes, uint size);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"shell-and-icons",children:"Shell and Icons"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"int AddClipboardFormatListener(IntPtr hwnd);\nIntPtr SHGetFileInfo(void* pszPath, uint dwFileAttributes, SHFILEINFOA* psfi, \n    uint cbFileInfo, uint uFlags);\nIntPtr SHGetFileInfoW(void* pszPath, uint dwFileAttributes, SHFILEINFOW* psfi, \n    uint cbFileInfo, uint uFlags);\nint ExtractIconEx(void* lpszFile, int nIconIndex, void* phiconLarge, void* phiconSmall, int nIcons);\nint ExtractIconExW(void* lpszFile, int nIconIndex, void* phiconLarge, void* phiconSmall, int nIcons);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"memory-operations",children:"Memory Operations"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"void RtlMoveMemory(IntPtr destination, IntPtr source, uint length);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"text-services",children:"Text Services"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"int TF_CreateThreadMgr(void* threadMgr);\n"})}),"\n",(0,r.jsx)(t.h3,{id:"notes",children:"Notes"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:"Functions with 'W' suffix are Unicode versions"}),"\n",(0,r.jsx)(t.li,{children:"Most functions return non-zero for success, zero for failure"}),"\n",(0,r.jsx)(t.li,{children:"IntPtr parameters typically represent handles (HWND, HDC, etc.)"}),"\n",(0,r.jsx)(t.li,{children:"void* parameters are typically for strings or structures in unmanaged code"}),"\n"]}),"\n",(0,r.jsx)(t.h3,{id:"usage-example",children:"Usage Example"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-csharp",children:"// Example of getting window dimensions and position\nvar hwnd = window.PlatformImpl.Handle.Handle;\nvar rect = new RECT();\nif (GetWindowRect(hwnd, &rect) != 0)\n{\n    int width = rect.right - rect.left;\n    int height = rect.bottom - rect.top;\n    int x = rect.left;\n    int y = rect.top;\n}\n"})})]})}function h(n={}){const{wrapper:t}={...(0,a.R)(),...n.components};return t?(0,r.jsx)(t,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},28453:(n,t,e)=>{e.d(t,{R:()=>o,x:()=>d});var i=e(96540);const r={},a=i.createContext(r);function o(n){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof n?n(t):{...t,...n}}),[t,n])}function d(n){let t;return t=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),i.createElement(a.Provider,{value:t},n.children)}}}]);