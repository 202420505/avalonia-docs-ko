"use strict";(self.webpackChunkavalonia_docs=self.webpackChunkavalonia_docs||[]).push([[1887],{94004:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"concepts/reactiveui/command-update","title":"Command Update","description":"CONCEPTS - ReactiveUI","source":"@site/docs/concepts/reactiveui/command-update.md","sourceDirName":"concepts/reactiveui","slug":"/concepts/reactiveui/command-update","permalink":"/ru/docs/concepts/reactiveui/command-update","draft":false,"unlisted":false,"editUrl":"https://github.com/AvaloniaUI/avalonia-docs/tree/main/docs/concepts/reactiveui/command-update.md","tags":[],"version":"current","lastUpdatedBy":"202420505","lastUpdatedAt":1755588461000,"frontMatter":{"description":"CONCEPTS - ReactiveUI"},"sidebar":"documentationSidebar","previous":{"title":"Reactive View Model","permalink":"/ru/docs/concepts/reactiveui/reactive-view-model"},"next":{"title":"Reactive Command","permalink":"/ru/docs/concepts/reactiveui/reactive-command"}}');var o=t(74848),c=t(28453);const a={description:"CONCEPTS - ReactiveUI"},r="Command Update",s={},d=[];function l(e){const n={code:"code",em:"em",h1:"h1",header:"header",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"command-update",children:"Command Update"})}),"\n",(0,o.jsxs)(n.p,{children:["This page introduces how you can use Avalonia UI binding to initiate changes on a view model from controls like buttons that have a ",(0,o.jsx)(n.code,{children:"Command"})," attribute."]}),"\n",(0,o.jsxs)(n.p,{children:["For example, you can use this view model with an action defined in the method ",(0,o.jsx)(n.code,{children:"ButtonAction"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-csharp",children:'public class MainWindowViewModel : ViewModelBase\n{\n    private string _greeting = "Welcome to Avalonia!";\n\n    public string Greeting\n    {\n        get => _greeting;\n        set => this.RaiseAndSetIfChanged(ref _greeting,  value);\n    }\n\n    public void ButtonAction()\n    {\n        Greeting = "Another greeting from Avalonia";\n    }\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Then in the corresponding XAML define two controls:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-xml",children:'<TextBlock Text="{Binding Greeting}" />\n<Button Command="{Binding ButtonAction}" >Change It</Button>\n'})}),"\n",(0,o.jsxs)(n.p,{children:["This means that when the user clicks the button, ",(0,o.jsx)(n.em,{children:"Avalonia UI"})," updates the view model by calling the ",(0,o.jsx)(n.code,{children:"ButtonAction"})," method. This changes the ",(0,o.jsx)(n.code,{children:"Greeting"})," property using the setter, so in turn the new greeting text is notified back to the text control on the UI."]})]})}function u(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>r});var i=t(96540);const o={},c=i.createContext(o);function a(e){const n=i.useContext(c);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),i.createElement(c.Provider,{value:n},e.children)}}}]);